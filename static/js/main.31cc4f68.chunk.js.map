{"version":3,"sources":["config/configs.ts","components/events/events.tsx","components/info/info.tsx","components/controls/button/button.tsx","components/controls/checkbox/checkbox.tsx","components/controls/dropdown/dropdown.tsx","model/generator/config.ts","components/controls/slider/slider.tsx","components/controls/generator/direct.tsx","components/controls/generator/drunkard.tsx","components/controls/generator/gnome.tsx","model/cell/forcing.ts","components/controls/controls.tsx","model/generator/util.ts","model/generator/direct.ts","model/path/moves.ts","model/generator/drunkard.ts","model/generator/gnome.ts","model/generator/generator.ts","model/cell/cell.ts","model/grid/grid.ts","components/cell/svg/hexagon.svg","components/cell/svg/e2e.svg","components/cell/svg/e2ne.svg","components/cell/svg/e2nw.svg","components/cell/svg/e2w.svg","components/cell/svg/e2sw.svg","components/cell/svg/e2se.svg","components/cell/svg/in_e.svg","components/cell/svg/out_e.svg","components/cell/colors.ts","components/cell/moves.tsx","components/cell/cell.tsx","components/grid/grid.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["DEFAULT_ALGORITHM","GENERATOR_ALGORITHMS","PAINT_MODES","Event","subscribers","Set","this","subscribe","bind","unsubscribe","fire","subscriber","add","delete","details","Events","COLUMNS_SLIDER_VALUE_CHANGE","ROWS_SLIDER_VALUE_CHANGE","SHOW_LABELS_CHECKBOX_CHANGE","ANIMATE_ROUTES_CHECKBOX_CHANGE","GENERATOR_STATUS_INFO","GENERATOR_ALGORITHM_SELECT","PAINT_MODE_SELECT","GENERATE_BUTTON","CLEAR_ROUTES_BUTTON","RESET_GRID_BUTTON","DOWNLOAD_GRID_BUTTON","Info","props","state","value","startValue","updateValue","updateEvent","newValue","setState","React","Component","Button","className","onMouseUp","onPressEvent","label","Checkbox","checked","onInput","onChangeEvent","type","id","name","Dropdown","selected","placeholder","makeOptions","onSelect","results","options","option","push","onClick","DEFAULT_DIRECT_ROUTE_CONFING","numEntrances","numExits","randomness","DEFAULT_DRUNKARD_CONFIG","DEFAULT_THE_TRAVELING_GNOME_CONFIG","wandering","DECIMAL_TO_INT_FACTOR","Slider","integerStepSize","integerMaxValue","integerMinValue","step","min","max","integerStartingValue","startingValue","e","parseInt","target","style","marginLeft","DirectRouteControls","config","Object","assign","updateNumEntrances","updateNumExits","updateRandomness","ref","createRef","DrunkardControls","GnomeControls","updateWandering","tortuosity","Forcing","Controls","algorithm","getAlgorithmControls","updateSelectedAlgorithm","paddingBottom","shuffleInPlace","items","counter","length","index","Math","floor","random","temp","shuffleToNew","result","defaultValue","desired","def","undefined","extractPathTerminals","grid","numBoundaryCellsToChooseForEntrances","numBoundaryCellsToChooseForExits","entrances","getEntrances","exits","getExits","boundaryCells","getBoundaryCells","i","isTraversable","Error","totalPaths","availableExits","availableEntrances","pathTerminals","shift","Move","MAX_GENERATED_PEAK_COST","direct","safeConfig","cost","cells","getCells","Map","nRows","getRowCount","halfRows","keys","iY","set","nCols","getColumnCount","halfCols","get","iX","iYPropDistanceFromBoundary","iXPropDistanceFromBoundary","baseIncentive","finalIncentive","peaks","peakCost","halfWidth","size","maxCost","cellCost","peak","iXDiff","iYDiff","distanceFromPeak","sqrt","peakContribution","distScaleOfZ","PI","cos","determinism","finalCost","generateCostSurface","paths","terminalPair","entrance","exit","dijkstras","error","alert","source","destination","distances","previous","unvisitedCells","distance","Number","POSITIVE_INFINITY","getIY","getIX","candidateNextCells","iteration","current","getNext","cospatial","currentDistance","getNeighbors","neighbor","has","nbrIY","nbrIX","neighborDistance","distanceWithCurrent","path","reverse","candidates","minDistance","best","cell","Direction","E2E","E2NE","E2NW","E2W","E2SW","E2SE","E_IN","E_OUT","NE2E","NE2NE","NE2NW","NE2W","NE2SW","NE2SE","NE_IN","NE_OUT","NW2E","NW2NE","NW2NW","NW2W","NW2SW","NW2SE","NW_IN","NW_OUT","W2E","W2NE","W2NW","W2W","W2SW","W2SE","W_IN","W_OUT","SW2E","SW2NE","SW2NW","SW2W","SW2SW","SW2SE","SW_IN","SW_OUT","SE2E","SE2NE","SE2NW","SE2W","SE2SW","SE2SE","SE_IN","SE_OUT","DIRECTIONS","E","NE","NW","W","SW","SE","DIRECTION_TO_MOVE","findATraversableNeighbor","directions","direction","getNeighborTowardDirection","takeADetour","detourStartIndex","detourStart","detourDestination","start","getCellsFlat","candidate","generateDetourDestination","pathFromStartToDest","generateDirectRoute","pathFromDestToExit","detourDestinationIndex","newPath","slice","stop","tripLegGrid","deepCopy","NOT_TRAVERSABLE","getCell","setForcing","ENTRANCE","EXIT","directRouteResult","a","b","Generator","terminals","drunkard","detourInterval","MAX_SAFE_INTEGER","ceil","nextDetourIndex","detourResult","detourLength","theTravelingGnome","Cell","forcing","NONE","copyForcings","copy","includes","other","Symbol","iterator","Grid","nColumnsOnEvenIndexRows","nColumnsOnOddIndexRows","nCells","nEvenRows","nOddRows","neighbors","angleRadians","iXNbr","iYNbr","diffRowColumnShift","E_NBR_END","NE_NBR_END","NW_NBR_END","W_NBR_END","SW_NBR_END","SE_NBR_END","intermediate","sourceDirection","destinationDirection","findDirectionWithNoNeighbor","directionBetween","defaultTo","row","nCellsOnRow","isEntrance","isExit","CellIterator","sizeY","sizeX","nColIterated","rowSource","colSource","rowDest","colDest","xDiff","yDiff","angle","atan2","angleBetween","PI_OVER_SIX","done","_extends","arguments","key","prototype","hasOwnProperty","call","apply","_objectWithoutProperties","excluded","sourceKeys","indexOf","_objectWithoutPropertiesLoose","getOwnPropertySymbols","sourceSymbolKeys","propertyIsEnumerable","_ref2","d","fill","stroke","strokeWidth","strokeMiterlimit","SvgHexagon","_ref","svgRef","title","titleId","xmlns","viewBox","height","width","position","ForwardRef","SvgE2E","SvgE2Ne","SvgE2Nw","transform","SvgE2W","SvgE2Sw","SvgE2Se","SvgInE","SvgOutE","colors","colormap","nshades","format","RAD2DEG","HEX_SECTION_RAD","HEX_SECTION_DEG","round","ROTATION","DisplayMoves","getMoves","proportion","moves","configs","move","color","pathLength","trunc","DisplayCell","showLabel","toggleForcing","sweepForcing","getLabel","setShowLabel","setMoves","clearMoves","addMove","reset","doShow","event","buttons","paintModeToggle","selectedPaintMode","fontSize","column","top","y","left","x","getColors","onMouseEnter","onMouseDown","mode","console","warn","updatePaintMode","DisplayGrid","displayCellRefs","cellShowLabelStart","animateRoutes","selectedAlgorithm","activePaths","columns","rows","updateRows","updateColumns","setCellShowLabelStart","setSelectedAlgorithm","generateRoutes","updateDoAnimateRoutes","downloadGrid","r","c","startState","doAnimation","analysisGrid","ofNominalSize","cellsObj","getNumberOfColumnsOnEvenIndexRows","getNumberOfColumnsOnOddIndexRows","analysisCell","displayCell","getForcing","forcings","outputPath","algorithmSettings","getConfig","contents","settings","element","document","createElement","setAttribute","encodeURIComponent","JSON","stringify","display","body","appendChild","click","removeChild","generateDrunkardPaths","generateDirectRoutePaths","generateTheTravelingGnomePaths","animationIntervalMs","currentAnimationDelay","getDisplayCellFromAnalysisCell","getMoveTowardOtherCell","moveData","setTimeout","createDisplayCell","cellSizePercent","gridWidthPropOfCellWidth","containerHeightProportionOfWidth","createDisplayGrid","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.31cc4f68.chunk.js","sourcesContent":["const DEFAULT_ROWS : number = 8;\r\nconst DEFAULT_COLUMNS : number = 35;\r\nconst MIN_ROWS : number = 2;\r\nconst MAX_ROWS : number = 100;\r\nconst MIN_COLUMNS : number = 2;\r\nconst MAX_COLUMNS : number = 100;\r\nconst ROUTE_ANIMATION_INTERVAL_MS = 250;\r\nconst DEFAULT_ALGORITHM : string = \"The Traveling Gnome\";\r\nconst GENERATOR_ALGORITHMS : string[] = [\"Direct\", \"Drunkard\", \"The Traveling Gnome\"];\r\nconst PAINT_MODES : string[] = [\"Make Impassable\", \"Force Entrance\", \"Force Exit\"];\r\n\r\nexport {\r\n    DEFAULT_ROWS, \r\n    DEFAULT_COLUMNS,\r\n    MIN_COLUMNS, \r\n    MAX_COLUMNS,\r\n    MIN_ROWS, \r\n    MAX_ROWS, \r\n    DEFAULT_ALGORITHM, \r\n    GENERATOR_ALGORITHMS,\r\n    PAINT_MODES,\r\n    ROUTE_ANIMATION_INTERVAL_MS\r\n};","/**\r\n * This event class allows components to (un)subscribe, giving a direct reference\r\n * to the event that can be used easily in multiple places. The usage pattern for subscribers\r\n * is like\r\n * \r\n * ```\r\n * class MyClass extends React.Component {\r\n * \r\n *  componentDidMoutn() {}\r\n        Events.COLUMNS_SLIDER_VALUE_CHANGE.subscribe(this.updateColumns);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        Events.COLUMNS_SLIDER_VALUE_CHANGE.unsubscribe(this.updateColumns);\r\n    }\r\n  }\r\n * ```\r\n *\r\n * The usage pattern for event firers is like\r\n * \r\n * ```\r\n * ...\r\n *    myMethod() {\r\n *       Events.COLUMNS_SLIDER_VALUE_CHANGE.fire(3);\r\n *    }\r\n * ...\r\n * ```\r\n */\r\nclass Event<T> {\r\n    private readonly subscribers : Set<Subscriber<T>> = new Set<Subscriber<T>>();\r\n\r\n    constructor() {\r\n        this.subscribe = this.subscribe.bind(this);\r\n        this.unsubscribe = this.unsubscribe.bind(this);\r\n        this.fire = this.fire.bind(this);\r\n    }\r\n\r\n\r\n    /**\r\n     * Subscribe a callback to the event.\r\n     * \r\n     * @param subscriber reference to callback subscriber method to be called when the event fires\r\n     */\r\n    public subscribe(subscriber : Subscriber<T>) {\r\n        this.subscribers.add(subscriber);\r\n    }\r\n\r\n\r\n    /**\r\n     * Unsubscribe a callback from the event.\r\n     * \r\n     * @param subscriber reference to callback subscriber method to remove from event subscription\r\n     */\r\n    public unsubscribe(subscriber : Subscriber<T>) {\r\n        this.subscribers.delete(subscriber);\r\n    }\r\n\r\n\r\n    /**\r\n     * Send the event payload to all subscribers.\r\n     * \r\n     * @param details event payload\r\n     */\r\n    public fire(details : T) : void {\r\n        for (let subscriber of this.subscribers) {\r\n            subscriber(details);\r\n        }\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * Callback for events.\r\n */\r\ninterface Subscriber<T> {\r\n\r\n    /**\r\n     * @param eventDetails event payload\r\n     */\r\n    (eventDetails : T) : void;\r\n}\r\n\r\n\r\n/** Events, that can be fired by and/or subscribed to by components. */\r\nclass Events {\r\n\r\n    /** Event for when the grid column size slider value changes. */\r\n    public static readonly COLUMNS_SLIDER_VALUE_CHANGE : Event<number> = new Event<number>();\r\n\r\n    /** Event for when the grid row size slider value changes. */\r\n    public static readonly ROWS_SLIDER_VALUE_CHANGE : Event<number> = new Event<number>();\r\n\r\n    /** Event for when the show labels checkbox state changes. */\r\n    public static readonly SHOW_LABELS_CHECKBOX_CHANGE : Event<boolean> = new Event<boolean>();\r\n\r\n    /** Event for when the animate routes checkbox state changes. */\r\n    public static readonly ANIMATE_ROUTES_CHECKBOX_CHANGE : Event<boolean> = new Event<boolean>();\r\n\r\n    /** Event for when a path generator submits a status message. */\r\n    public static readonly GENERATOR_STATUS_INFO : Event<string> = new Event<string>();\r\n\r\n    /** Event for when the selected path generation algorithm changes. */\r\n    public static readonly GENERATOR_ALGORITHM_SELECT : Event<string> = new Event<string>();\r\n\r\n    /** Event for when the grid paint mode changes. */\r\n    public static readonly PAINT_MODE_SELECT : Event<string> = new Event<string>();\r\n\r\n    /** Event for when the user clicks on the button to generate paths. */\r\n    public static readonly GENERATE_BUTTON : Event<void> = new Event<void>();\r\n\r\n    /** Event for when the user clicks on the button to clear routes from the grid. */\r\n    public static readonly CLEAR_ROUTES_BUTTON : Event<void> = new Event<void>();\r\n\r\n    /** Event for when the user clicks on the button to clear all states (paths, entrances, exits, etc) from the grid. */\r\n    public static readonly RESET_GRID_BUTTON : Event<void> = new Event<void>();\r\n\r\n    /** Event for when the user click on the download grid button. */\r\n    public static readonly DOWNLOAD_GRID_BUTTON : Event<void> = new Event<void>();\r\n}\r\n\r\n\r\nexport {Events, Event};\r\nexport type {Subscriber};","import React from 'react';\r\nimport { Event } from '../events/events';\r\n\r\ninterface Props {\r\n    /** Starting value string for the info box. */\r\n    startValue : string,\r\n\r\n    /** Event to use to update the value. */\r\n    updateEvent : Event<string>\r\n}\r\n\r\ninterface State {\r\n    value : string\r\n}\r\n\r\n\r\n/** Basic info (text) component that can update based on events. */\r\nclass Info extends React.Component<Props, State> {\r\n    constructor(props : Props) {\r\n        super(props);\r\n        this.state = {value : this.props.startValue};\r\n        this.updateValue = this.updateValue.bind(this);\r\n    }\r\n\r\n\r\n    componentDidMount() : void {\r\n        this.props.updateEvent.subscribe(this.updateValue);\r\n    }\r\n\r\n\r\n    componentWillUnmount() : void {\r\n        this.props.updateEvent.unsubscribe(this.updateValue);\r\n    }\r\n\r\n\r\n    private updateValue(newValue : string) {\r\n        this.setState({value : newValue});\r\n    }\r\n\r\n    \r\n    render() {\r\n        return <p>{this.state.value}</p>\r\n    }\r\n}\r\n\r\nexport {Info};","import React from 'react';\r\nimport { Event } from '../../events/events';\r\nimport './button.css';\r\n\r\ninterface Props {\r\n    /** String displayed in the button. */\r\n    label : string,\r\n\r\n    /** Event to fire when the button is pressed. */\r\n    onPressEvent : Event<void>\r\n}\r\n\r\ninterface State {\r\n}\r\n\r\n\r\n/** Basic button component. */\r\nclass Button extends React.Component<Props, State> {\r\n\r\n    render() {\r\n        return <button className=\"button\" onMouseUp={() => this.props.onPressEvent.fire()}>{this.props.label}</button>\r\n\r\n    }\r\n}\r\n\r\nexport {Button};","import React from 'react';\r\n\r\ninterface Props {\r\n    /** String label displayed with the checkbox. */\r\n    label : string,\r\n\r\n    /** \r\n     * Callback to call when the checkbox changes from checked to unchecked and vice versa.\r\n     * \r\n     * @param state state of the checkbox after the change\r\n     */\r\n    onChangeEvent : (state : boolean) => void\r\n\r\n    /** Starting state of the checkbox. */\r\n    checked? : boolean\r\n}\r\n\r\ninterface State {\r\n    checked : number\r\n}\r\n\r\n\r\n/** Basic checkbox component. */\r\nclass Checkbox extends React.Component<Props, State> {\r\n\r\n    constructor(props : Props) {\r\n        super(props);\r\n        this.state = {checked : this.props.checked ? 1 : 0};\r\n        this.onInput = this.onInput.bind(this);\r\n    }\r\n    \r\n    private onInput() : void {\r\n        const newValue : number = 1 - this.state.checked;\r\n        this.setState({checked: newValue});\r\n        this.props.onChangeEvent(newValue === 1 ? true : false);\r\n    }\r\n\r\n    render() {\r\n        return <div>\r\n            <input type=\"checkbox\" \r\n                id={this.props.label}\r\n                name={this.props.label}\r\n                value={this.state.checked}\r\n                onInput={this.onInput}\r\n            />\r\n            <label>{this.props.label}</label>\r\n        </div>\r\n    }\r\n}\r\n\r\nexport {Checkbox};","import React from 'react';\r\nimport './dropdown.css';\r\n\r\ninterface Props {\r\n    /** Placeholder string to show in the dropdown before options are selected. */\r\n    placeholder : string,\r\n\r\n    /** Menu options. */\r\n    options : string[],\r\n\r\n    /**\r\n     * Callback function to fire when an item is selected.\r\n     * \r\n     * @param selected selected menu item\r\n     */\r\n    onSelect : (selected : string) => void\r\n}\r\n\r\ninterface State {\r\n    selected : string\r\n}\r\n\r\n\r\n/** Basic dropdown selection menu component. */\r\nclass Dropdown extends React.Component<Props, State> {\r\n\r\n    constructor(props : Props) {\r\n        super(props);\r\n        this.state = {selected: this.props.placeholder}\r\n        this.makeOptions = this.makeOptions.bind(this);\r\n        this.onSelect = this.onSelect.bind(this);\r\n    }\r\n\r\n\r\n    private makeOptions() : any {\r\n        const results = [];\r\n        for (let option of this.props.options) {\r\n            results.push(<nav key={option} onClick={() => this.onSelect(option)}>{option}</nav>)\r\n        }\r\n        return results;\r\n    }\r\n\r\n\r\n    private onSelect(selected : string) : void {\r\n        this.props.onSelect(selected);\r\n        this.setState({selected : selected});\r\n    }\r\n\r\n\r\n    render() {\r\n        return <div className=\"dropdown\">\r\n            <button className=\"dropbtn\">{this.state.selected + \"  ▼\"}</button>\r\n            <div className=\"dropdown-content\">\r\n                {this.makeOptions()}\r\n            </div>\r\n      </div>\r\n    }\r\n}\r\n\r\nexport {Dropdown};","\r\n// so that we can easily track the params that\r\n//  created a given path\r\ninterface AlgorithmConfig {\r\n    \r\n    /** Number of path entrances; overriden by having forced entrances. */\r\n    numEntrances? : number;\r\n\r\n    /** Number of path exits; overriden by having forced exits. */\r\n    numExits? : number;\r\n}\r\n\r\ninterface DirectRouteConfig extends AlgorithmConfig {\r\n    /**\r\n     * How much the route should be affected by random perturbations (0-1).\r\n     */\r\n    randomness? : number;\r\n}\r\n\r\ninterface DrunkardConfig extends AlgorithmConfig {\r\n}\r\n\r\ninterface TheTravelingGnomeConfig extends AlgorithmConfig {\r\n    /** \r\n     * How much wandering the gnome should do in its travels. This affects\r\n     * the tortuosity of routes as well as the number of detours the route\r\n     * takes on its way from entrance to exit.\r\n     */\r\n    wandering? : number;\r\n}\r\n\r\nconst DEFAULT_DIRECT_ROUTE_CONFING : DirectRouteConfig = {\r\n    numEntrances: 1,\r\n    numExits: 1,\r\n    randomness: 0,\r\n}\r\n\r\nconst DEFAULT_DRUNKARD_CONFIG : DrunkardConfig = {\r\n    numEntrances: 1, \r\n    numExits: 1\r\n}\r\n\r\nconst DEFAULT_THE_TRAVELING_GNOME_CONFIG : TheTravelingGnomeConfig = {\r\n    numEntrances: 1,\r\n    numExits: 1,\r\n    wandering: 0.5\r\n}\r\n\r\n\r\nexport type {AlgorithmConfig, DirectRouteConfig, TheTravelingGnomeConfig, DrunkardConfig};\r\nexport {DEFAULT_DIRECT_ROUTE_CONFING, DEFAULT_DRUNKARD_CONFIG, DEFAULT_THE_TRAVELING_GNOME_CONFIG};","import React from 'react';\r\nimport './slider.css';\r\n\r\ninterface Props {\r\n    /** String label to display with the slider. */\r\n    label : string,\r\n\r\n    /** Minimum allowed value. */\r\n    min : number,\r\n\r\n    /** Maximum allowed value. */\r\n    max : number,\r\n\r\n    /**\r\n     * Callback function for when the value changes.\r\n     * \r\n     * @param value new value after the slider value changes\r\n     */\r\n    onChangeEvent : (value : number) => void,\r\n\r\n    /** Starting value. */\r\n    startingValue? : number,\r\n\r\n    /** How big the steps between values should be (can be a non-integer). */\r\n    step? : number\r\n}\r\n\r\ninterface State {\r\n    value: number\r\n}\r\n\r\n\r\nconst DECIMAL_TO_INT_FACTOR : number = 1e9;\r\n\r\n\r\n/** Basic range slider component. */\r\nclass Slider extends React.Component<Props, State> {\r\n    private readonly integerStepSize : number;\r\n    private readonly integerMaxValue : number;\r\n    private readonly integerMinValue : number;\r\n\r\n    constructor(props : Props) {\r\n        super(props);\r\n        this.integerStepSize = DECIMAL_TO_INT_FACTOR * (props.step ? props.step : 1);\r\n        this.integerMinValue = DECIMAL_TO_INT_FACTOR * props.min;\r\n        this.integerMaxValue = DECIMAL_TO_INT_FACTOR * props.max;\r\n        const integerStartingValue : number = DECIMAL_TO_INT_FACTOR * (props.startingValue ? props.startingValue : props.min);\r\n        this.state = {value: integerStartingValue};\r\n        this.onInput = this.onInput.bind(this);\r\n    }\r\n    \r\n    private onInput(e : React.FormEvent<HTMLInputElement>) : void {\r\n        const newValue = parseInt((e.target as HTMLInputElement).value);\r\n        // avoid causing a redraw unless the value actually changes, which will\r\n        //  not happen when the slider gets to the max/min values\r\n        if (newValue !== this.state.value) {\r\n            this.setState({value: newValue});\r\n            this.props.onChangeEvent(newValue / DECIMAL_TO_INT_FACTOR);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return <div className=\"slider-container\">\r\n            <label>{this.props.label}</label>\r\n            <input style={{marginLeft: \"1em\"}} type=\"range\" \r\n                id={this.props.label}\r\n                name={this.props.label}\r\n                min={this.integerMinValue}\r\n                max={this.integerMaxValue}\r\n                value={this.state.value}\r\n                onInput={this.onInput}\r\n                step={this.integerStepSize}\r\n            />\r\n            <label style={{marginLeft: \"1em\"}}>{this.state.value / DECIMAL_TO_INT_FACTOR}</label>\r\n        </div>\r\n\r\n    }\r\n}\r\n\r\nexport {Slider};","import React from 'react';\r\nimport { DEFAULT_DIRECT_ROUTE_CONFING, DirectRouteConfig } from '../../../model/generator/config';\r\nimport { Slider } from '../slider/slider';\r\n\r\ninterface Props {\r\n}\r\n\r\ninterface State {\r\n}\r\n\r\n/**\r\n * React controls for the 'direct' path generation algorithm.\r\n */\r\nclass DirectRouteControls extends React.Component<Props, State> {\r\n    public static readonly ref : React.RefObject<DirectRouteControls> = React.createRef();\r\n    private readonly config : DirectRouteConfig = Object.assign({}, DEFAULT_DIRECT_ROUTE_CONFING);\r\n\r\n    constructor(props : Props) {\r\n        super(props);\r\n        this.updateNumEntrances = this.updateNumEntrances.bind(this);\r\n        this.updateNumExits = this.updateNumExits.bind(this);\r\n        this.updateRandomness = this.updateRandomness.bind(this);\r\n    }\r\n\r\n\r\n    private updateNumEntrances(numEntrances : number) : void {\r\n        this.config.numEntrances = numEntrances;\r\n    }\r\n    \r\n    \r\n    private updateNumExits(numExits : number) : void {\r\n        this.config.numExits = numExits;\r\n    }\r\n    \r\n    \r\n    private updateRandomness(randomness : number) : void {\r\n        this.config.randomness = randomness;\r\n    }\r\n\r\n    /**\r\n     * @returns the current configuration for the algorithm\r\n     */\r\n    public getConfig() : DirectRouteConfig {\r\n        return this.config;\r\n    }\r\n\r\n    render() {\r\n        return <div>\r\n            <Slider label=\"Number of Entrances\" min={1} startingValue={1} max={20} onChangeEvent={this.updateNumEntrances}/>\r\n            <Slider label=\"Number of Exits\" min={1} startingValue={1} max={20} onChangeEvent={this.updateNumExits}/>\r\n            <Slider label=\"Randomness\" min={0} startingValue={0} max={1} step={0.01} onChangeEvent={this.updateRandomness}/>\r\n        </div>\r\n\r\n    }\r\n}\r\n\r\nexport {DirectRouteControls};","import React from 'react';\r\nimport { DEFAULT_DRUNKARD_CONFIG, DirectRouteConfig, DrunkardConfig } from '../../../model/generator/config';\r\nimport { Slider } from '../slider/slider';\r\n\r\ninterface Props {\r\n}\r\n\r\ninterface State {\r\n}\r\n\r\n/**\r\n * React controls for the 'drunkard' path generation algorithm.\r\n */\r\nclass DrunkardControls extends React.Component<Props, State> {\r\n    public static readonly ref : React.RefObject<DrunkardControls> = React.createRef();\r\n    private readonly config : DirectRouteConfig = Object.assign({}, DEFAULT_DRUNKARD_CONFIG);\r\n\r\n    constructor(props : Props) {\r\n        super(props);\r\n        this.updateNumEntrances = this.updateNumEntrances.bind(this);\r\n        this.updateNumExits = this.updateNumExits.bind(this);\r\n    }\r\n\r\n\r\n    private updateNumEntrances(numEntrances : number) : void {\r\n        this.config.numEntrances = numEntrances;\r\n    }\r\n    \r\n    \r\n    private updateNumExits(numExits : number) : void {\r\n        this.config.numExits = numExits;\r\n    }\r\n    \r\n\r\n    /**\r\n     * @returns the current configuration for the algorithm\r\n     */\r\n    public getConfig() : DrunkardConfig {\r\n        return this.config;\r\n    }\r\n\r\n\r\n    render() {\r\n        return <div>\r\n            <Slider label=\"Number of Entrances\" min={1} startingValue={1} max={20} onChangeEvent={this.updateNumEntrances}/>\r\n            <Slider label=\"Number of Exits\" min={1} startingValue={1} max={20} onChangeEvent={this.updateNumExits}/>\r\n        </div>\r\n\r\n    }\r\n}\r\n\r\nexport {DrunkardControls};","import React from 'react';\r\nimport { DEFAULT_THE_TRAVELING_GNOME_CONFIG, TheTravelingGnomeConfig } from '../../../model/generator/config';\r\nimport { Slider } from '../slider/slider';\r\n\r\ninterface Props {\r\n}\r\n\r\ninterface State {\r\n}\r\n\r\n/**\r\n * React controls for the 'gnome' path generation algorithm.\r\n */\r\nclass GnomeControls extends React.Component<Props, State> {\r\n    public static readonly ref : React.RefObject<GnomeControls> = React.createRef();\r\n    private readonly config : TheTravelingGnomeConfig = Object.assign({}, DEFAULT_THE_TRAVELING_GNOME_CONFIG);\r\n\r\n    constructor(props : Props) {\r\n        super(props);\r\n        this.updateNumEntrances = this.updateNumEntrances.bind(this);\r\n        this.updateNumExits = this.updateNumExits.bind(this);\r\n        this.updateWandering = this.updateWandering.bind(this);\r\n    }\r\n\r\n\r\n    private updateNumEntrances(numEntrances : number) : void {\r\n        this.config.numEntrances = numEntrances;\r\n    }\r\n    \r\n    \r\n    private updateNumExits(numExits : number) : void {\r\n        this.config.numExits = numExits;\r\n    }\r\n\r\n\r\n    private updateWandering(tortuosity : number) : void {\r\n        this.config.wandering = tortuosity;\r\n    }\r\n\r\n\r\n    /**\r\n     * @returns the current configuration for the algorithm\r\n     */\r\n    public getConfig() : TheTravelingGnomeConfig {\r\n        return this.config;\r\n    }\r\n\r\n\r\n    render() {\r\n        return <div>\r\n            <Slider label=\"Number of Entrances\" min={1} startingValue={DEFAULT_THE_TRAVELING_GNOME_CONFIG.numEntrances} max={20} onChangeEvent={this.updateNumEntrances}/>\r\n            <Slider label=\"Number of Exits\" min={1} startingValue={DEFAULT_THE_TRAVELING_GNOME_CONFIG.numExits} max={20} onChangeEvent={this.updateNumExits}/>\r\n            <Slider label=\"Wandering\" min={0} startingValue={DEFAULT_THE_TRAVELING_GNOME_CONFIG.wandering} max={1} step={0.01} onChangeEvent={this.updateWandering}/>\r\n        </div>\r\n\r\n    }\r\n}\r\n\r\nexport {GnomeControls};","enum Forcing {\r\n    \r\n    /** No forcing (default state of cells). */\r\n    NONE, \r\n    \r\n    /** Forces a cell to be an entrance, i.e. where enemies would come from. */\r\n    ENTRANCE, \r\n    \r\n    /** Forces a cell to be an exit, i.e. where enemies would exit to. */\r\n    EXIT, \r\n    \r\n    /** Forces a cell to be impassable, ie.e not valid for entrances, exits, or any other parts of paths. */\r\n    NOT_TRAVERSABLE\r\n}\r\n\r\nexport {Forcing}","import React from 'react';\r\nimport { DEFAULT_ALGORITHM, DEFAULT_COLUMNS, DEFAULT_ROWS, GENERATOR_ALGORITHMS, MAX_COLUMNS, MAX_ROWS, MIN_COLUMNS, MIN_ROWS, PAINT_MODES } from '../../config/configs';\r\nimport { Events } from '../events/events';\r\nimport { Info } from '../info/info';\r\nimport { Button } from './button/button';\r\nimport { Checkbox } from './checkbox/checkbox';\r\nimport { Dropdown } from './dropdown/dropdown';\r\nimport { DirectRouteControls } from './generator/direct';\r\nimport { DrunkardControls } from './generator/drunkard';\r\nimport { Slider } from './slider/slider';\r\nimport './controls.css';\r\nimport { GnomeControls } from './generator/gnome';\r\n\r\ninterface Props {\r\n}\r\n\r\ninterface State {\r\n    algorithm : string,\r\n}\r\n\r\n\r\n/** Component/container for all controls. */\r\nclass Controls extends React.Component<Props, State> {\r\n\r\n    constructor(props : Props) {\r\n        super(props);\r\n        this.state = {algorithm: DEFAULT_ALGORITHM}\r\n        this.getAlgorithmControls = this.getAlgorithmControls.bind(this);\r\n        this.updateSelectedAlgorithm = this.updateSelectedAlgorithm.bind(this);\r\n    }\r\n\r\n\r\n    componentDidMount() {\r\n        Events.GENERATOR_ALGORITHM_SELECT.subscribe(this.updateSelectedAlgorithm);\r\n    }\r\n\r\n\r\n    componentWillUnmount() {\r\n        Events.GENERATOR_ALGORITHM_SELECT.unsubscribe(this.updateSelectedAlgorithm);\r\n    }\r\n\r\n\r\n    private updateSelectedAlgorithm(algorithm : string) : void {\r\n        this.setState({algorithm: algorithm});\r\n    }\r\n\r\n\r\n    private getAlgorithmControls() : any {\r\n        switch (this.state.algorithm) {\r\n            case \"Direct\":\r\n                return <DirectRouteControls ref={DirectRouteControls.ref}/>;\r\n\r\n            case \"Drunkard\":\r\n                return <DrunkardControls ref={DrunkardControls.ref}/>;\r\n\r\n            case \"The Traveling Gnome\":\r\n                return <GnomeControls ref={GnomeControls.ref}/>;\r\n        }\r\n    }\r\n\r\n    \r\n    render() {\r\n        return <div className=\"controls-outer\">\r\n            <div className=\"controls-inner\">\r\n                <div className=\"control\">\r\n                    <Slider label=\"columns\" min={MIN_COLUMNS} max={MAX_COLUMNS} startingValue={DEFAULT_COLUMNS} onChangeEvent={Events.COLUMNS_SLIDER_VALUE_CHANGE.fire}/>\r\n                    <Slider label=\"rows\" min={MIN_ROWS} max={MAX_ROWS} startingValue={DEFAULT_ROWS} onChangeEvent={Events.ROWS_SLIDER_VALUE_CHANGE.fire}/>\r\n                </div>\r\n                <div className=\"control\">\r\n                    <Dropdown placeholder={\"Select Paint Mode\"} options={PAINT_MODES} onSelect={Events.PAINT_MODE_SELECT.fire}/>\r\n                </div>\r\n                <div className=\"control\">\r\n                    <Button label=\"Generate Routes\" onPressEvent={Events.GENERATE_BUTTON}/>\r\n                </div>\r\n                <div className=\"control\">\r\n                    <Button label=\"Clear Routes\" onPressEvent={Events.CLEAR_ROUTES_BUTTON}/>\r\n                </div>\r\n                <div className=\"control\">\r\n                    <Button label=\"Reset Grid\" onPressEvent={Events.RESET_GRID_BUTTON}/>\r\n                </div>\r\n                <div className=\"control\">\r\n                    <Checkbox label=\"Labels?\" onChangeEvent={Events.SHOW_LABELS_CHECKBOX_CHANGE.fire}/>\r\n                </div>\r\n                <div className=\"control\">\r\n                    <Checkbox label=\"Animate Routes?\" onChangeEvent={Events.ANIMATE_ROUTES_CHECKBOX_CHANGE.fire}/>\r\n                </div>\r\n                <div className=\"control\">\r\n                    <Button label=\"Download Grid\" onPressEvent={Events.DOWNLOAD_GRID_BUTTON}/>\r\n                </div>\r\n            </div>\r\n            <div className=\"controls-inner controls-algorithm\">\r\n                <label style={{paddingBottom: \"0.5em\"}}>Algorithm Controls</label>\r\n                <Dropdown placeholder={DEFAULT_ALGORITHM} options={GENERATOR_ALGORITHMS} onSelect={Events.GENERATOR_ALGORITHM_SELECT.fire}/>\r\n                <Info startValue=\"\" updateEvent={Events.GENERATOR_STATUS_INFO}/>\r\n                {this.getAlgorithmControls()}\r\n            </div>\r\n        </div>\r\n    }\r\n}\r\n\r\nexport {Controls};","import { Cell } from \"../cell/cell\";\r\nimport { Grid } from \"../grid/grid\";\r\n\r\n/**\r\n * Shuffles an array in place.\r\n * \r\n * @param items items to shuffle\r\n */\r\nfunction shuffleInPlace<T>(items : T[]) : void {\r\n    let counter = items.length;\r\n    while (counter > 0) {\r\n        const index = Math.floor(Math.random() * counter);\r\n        counter--;\r\n        const temp = items[counter];\r\n        items[counter] = items[index];\r\n        items[index] = temp;\r\n    }\r\n} \r\n\r\n\r\n/**\r\n * Shuffles items into a new array.\r\n * \r\n * @param items items to shuffle\r\n * @returns new array of shuffled items\r\n */\r\nfunction shuffleToNew<T>(items : T[]) : T[] {\r\n    const result : T[] = [...items];\r\n    shuffleInPlace(result);\r\n    return result;\r\n}\r\n\r\n\r\n/**\r\n * @param items items to choose from\r\n * @returns one randomly chosen item from the inputs\r\n */\r\nfunction chooseFrom<T>(items : T[]) : T {\r\n    return items[Math.floor(Math.random()*items.length)];\r\n}\r\n\r\n\r\n/**\r\n * \r\n * @param items items to choose from\r\n * @param n number of items to choose\r\n * @returns n items chosen (without replacement) from the given items\r\n */\r\nfunction chooseMultiple<T>(items : T[], n : number) : T[] {\r\n    const shuffled = shuffleToNew(items);\r\n    return shuffled.slice(0, n);\r\n}\r\n\r\n\r\n/**\r\n * @param desired candidate value to return\r\n * @param def default value to return if candidate fails checks\r\n * @returns desired value, or default value if desired value is undefined\r\n */\r\nfunction defaultValue<T>(desired : T, def : T): T {\r\n    return desired === undefined ? def : desired;\r\n}\r\n\r\n\r\n/**\r\n * Extracts forced entrances and exits from the grid.\r\n * \r\n * If there are more forced entrances than exits, exits will be reused.\r\n * \r\n * If there are more forced exits than entrances, entrances will be reused.\r\n * \r\n * If there are zero forced entrances (exits), then they will be generated from boundary cells.\r\n * \r\n * @param grid analysis grid to pull entrances and exits from\r\n * @param numEntrances number of entrances to fall back on if there are no forced entrances\r\n * @param numExits number of exits to fall back on if there are no forced exits\r\n * @returns pairs of [entrance, exit] path terminals\r\n */\r\nfunction extractPathTerminals(grid : Grid, numEntrances : number, numExits : number) : Cell[][] {\r\n    // figure out where we're entering and exiting\r\n    const entrances : Cell[] = grid.getEntrances();\r\n    const exits : Cell[] = grid.getExits();\r\n    let numBoundaryCellsToChooseForEntrances;\r\n    let numBoundaryCellsToChooseForExits;\r\n    if ((entrances.length === 0) && (exits.length === 0)) {\r\n        numBoundaryCellsToChooseForEntrances = numEntrances;\r\n        numBoundaryCellsToChooseForExits = numExits;\r\n        \r\n    } else if (entrances.length === 0) {\r\n        numBoundaryCellsToChooseForEntrances = numEntrances;\r\n        numBoundaryCellsToChooseForExits = 0;\r\n        \r\n    } else if (exits.length === 0) {\r\n        numBoundaryCellsToChooseForEntrances = 0;\r\n        numBoundaryCellsToChooseForExits = numExits;\r\n        \r\n    } else {\r\n        numBoundaryCellsToChooseForEntrances = 0;\r\n        numBoundaryCellsToChooseForExits = 0;\r\n    }\r\n    const numBoundaryCellsToChooseForEntrancesAndExits = numBoundaryCellsToChooseForEntrances + numBoundaryCellsToChooseForExits;\r\n    if (numBoundaryCellsToChooseForEntrancesAndExits > 0) {\r\n        const boundaryCells : Cell[] = grid.getBoundaryCells();\r\n        shuffleInPlace(boundaryCells);\r\n        for (let i : number = 0; i < boundaryCells.length; i++) {\r\n            if (boundaryCells[i].isTraversable()) {\r\n                if (entrances.length < numBoundaryCellsToChooseForEntrances) {\r\n                    entrances.push(boundaryCells[i]);\r\n                    \r\n                } else if (exits.length < numBoundaryCellsToChooseForExits) {\r\n                    exits.push(boundaryCells[i]);\r\n                    \r\n                } else {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    if ((entrances.length < numBoundaryCellsToChooseForEntrances) || (exits.length < numBoundaryCellsToChooseForExits)) {\r\n        throw new Error(\"Not enough boundary cells for entrances and exits.\");\r\n    }\r\n\r\n\r\n    // come up with a source and destination for each path\r\n    const totalPaths : number = Math.max(entrances.length, exits.length);\r\n    let availableExits : Cell[] = [];\r\n    let availableEntrances : Cell[] = [];\r\n    const pathTerminals : Cell[][] = [];\r\n    for (let i = 0; i < totalPaths; i++) {\r\n        if (availableExits.length === 0) {\r\n            availableExits = [...exits];\r\n            shuffleInPlace(availableExits);\r\n        }\r\n        if (availableEntrances.length === 0) {\r\n            availableEntrances = [...entrances];\r\n            shuffleInPlace(availableEntrances);\r\n        }\r\n        pathTerminals.push([availableEntrances.shift()!, availableExits.shift()!]);\r\n    }\r\n\r\n    return pathTerminals;\r\n}\r\n\r\n\r\n\r\nexport {shuffleInPlace, shuffleToNew, chooseFrom, chooseMultiple, defaultValue, extractPathTerminals}","import { Events } from \"../../components/events/events\";\r\nimport { Cell } from \"../cell/cell\";\r\nimport { Grid } from \"../grid/grid\";\r\nimport { DEFAULT_DIRECT_ROUTE_CONFING, DirectRouteConfig } from \"./config\";\r\nimport { defaultValue, extractPathTerminals } from \"./util\";\r\n\r\n// maximum value of \"peak\" cells which designate the center of \"mountains\" of cost. Larger values will\r\n//  make the peaks taller and result in greater difference between neighboring cells. Smaller values will\r\n//  do the opposite. In my playing around, this just needed to be sufficiently large to have an effect and\r\n//  didnt seem to do much otherwise.\r\nconst MAX_GENERATED_PEAK_COST : number = 1000;\r\n\r\n// proportion of of the width of of the grid (in number of cells) that the widest \"mountain\" can be\r\n//  increasing this will make more cells affected by peaks. If too large, it will result in less variation\r\n//  across the grid. If too small, it will result in very narrow areas of high values. Both extremes\r\n//  will make the paths less interesting.\r\nconst MAX_GENERATED_WIDTH_PROP : number = 0.15;\r\n\r\n// maximum proportion of (the random part of) a cell's cost we'll randomize at the end, to add more\r\n//  variation between neighboring cells and create more convoluted paths. Large values will result in nearby\r\n//  cells being uncorrelated, essentially erasing the effect of having peaks. Small values will increase the\r\n//  correlation of nearby cells, such that you will get more distinct circles to go around peaks.\r\nconst MAX_PERTURBATION_PROP : number = 0.4;\r\n\r\n// proportion of the map that should have peaks generated. Extreme values will result in less interesting paths.\r\nconst PEAK_PROPORTION : number = 0.25;\r\n\r\n// Value to encourage paths to be more interior to the grid. The value will start at this on the boundary \r\n//  and decrease to zero in the center of the grid.\r\nconst MAX_INTERIOR_ROUTE_INCENTIVE : number = MAX_GENERATED_PEAK_COST*0.5;\r\n\r\n\r\n/**\r\n * Generates enemy route(s) attempting to take a direct route from entrance(s) to exit(s). Routes are\r\n * generated using dijkstra's algorithm with a randomly generated cost surface that looks (roughly) like\r\n * mountainness terrain. Increasing the randomness of the algorithm results in an attempt to create more\r\n * circuitous routes from from entrance to exit.\r\n * \r\n * @param grid analysis grid to pull forcings and grid size from\r\n * @param config settings to use for this route generation\r\n */\r\nfunction direct(grid : Grid, config? : DirectRouteConfig) : Cell[][] {\r\n\r\n    // update and validate configs\r\n    const safeConfig : DirectRouteConfig = config === undefined ? DEFAULT_DIRECT_ROUTE_CONFING : config;\r\n    const numEntrances : number = defaultValue(safeConfig.numEntrances, DEFAULT_DIRECT_ROUTE_CONFING.numEntrances)!;\r\n    const numExits : number = defaultValue(safeConfig.numExits, DEFAULT_DIRECT_ROUTE_CONFING.numExits)!;\r\n    const randomness : number = defaultValue(safeConfig.randomness, DEFAULT_DIRECT_ROUTE_CONFING.randomness)!;\r\n    if ((randomness < 0) || (randomness > 1)) {\r\n        throw new Error(\"Randomness must be between 0 and 1, but it was \" + randomness);\r\n    }\r\n\r\n    // dijkstra's\r\n    const pathTerminals : Cell[][] = extractPathTerminals(grid, numEntrances, numExits);\r\n    const cost : Map<number, Map<number, number>> = generateCostSurface(grid, randomness);\r\n    const paths : Cell[][] = [];\r\n    for (let terminalPair of pathTerminals) {\r\n        const entrance : Cell = terminalPair[0];\r\n        const exit : Cell = terminalPair[1];\r\n        try {\r\n            paths.push(dijkstras(grid, cost, entrance, exit));\r\n\r\n        } catch (error) {\r\n            alert(error);\r\n            return [];\r\n        }\r\n    }\r\n    \r\n    return paths;\r\n}\r\n\r\n\r\nfunction generateCostSurface(grid : Grid, randomness: number) : Map<number, Map<number, number>> {\r\n\r\n    // initialize the cost surface with a gradient decreasing from the boundary of the grid to\r\n    //  encourage paths to be more on the interior of the grid\r\n    const cells : Map<number, Map<number, Cell>> = grid.getCells();\r\n    const cost : Map<number, Map<number, number>> = new Map<number, Map<number, number>>();\r\n    const nRows : number = grid.getRowCount();\r\n    const halfRows : number = nRows / 2.0;\r\n    for (let iY of cells.keys()) {\r\n        cost.set(iY, new Map<number, number>());\r\n        const nCols : number = grid.getColumnCount(iY);\r\n        const halfCols : number = nCols / 2.0;\r\n        for (let iX of cells.get(iY)!.keys()) {\r\n            // Calculate the distance from the boundary as a proportion of the distance between the boundary and the\r\n            //  center of the grid (i.e. half of the \"distance\" between 0 and nrows or nCols). This allows us to\r\n            //  calculate the incentive along the gradient using this proportion.\r\n            const iYPropDistanceFromBoundary : number = Math.min(iY, (nRows - 1) - iY) / halfRows;\r\n            const iXPropDistanceFromBoundary : number = Math.min(iX, (nCols - 1) - iX) / halfCols;\r\n            const cellPropDistanceFromBoundary : number = Math.min(iYPropDistanceFromBoundary, iXPropDistanceFromBoundary);\r\n            const baseIncentive : number = MAX_INTERIOR_ROUTE_INCENTIVE*(1 - cellPropDistanceFromBoundary);\r\n            const finalIncentive : number = Math.max(baseIncentive, 0);\r\n            cost.get(iY)!.set(iX, finalIncentive);\r\n        }\r\n    }\r\n\r\n        \r\n    // choose some peaks and generate their attributes\r\n    const peaks : {iY : number, iX : number, cost : number, halfWidth : number}[] = [];\r\n    for (let iY of cells.keys()) {\r\n        for (let iX of cells.get(iY)!.keys()) {\r\n            if (Math.random() < PEAK_PROPORTION) {\r\n                const peakCost : number = Math.random()*MAX_GENERATED_PEAK_COST;\r\n                const halfWidth : number = Math.random()*MAX_GENERATED_WIDTH_PROP*cells.get(iY)!.size;\r\n                peaks.push({iY: iY, iX: iX, cost: peakCost, halfWidth: halfWidth});\r\n            }\r\n        }\r\n    }\r\n    \r\n    // compute the cost of cells based on how far away they are from peaks (like mountains)\r\n    let maxCost : number = 0;\r\n    for (let iY of cells.keys()) {\r\n        for (let iX of cells.get(iY)!.keys()) {\r\n            let cellCost : number = cost.get(iY)!.get(iX)!;\r\n            for (let peak of peaks) {\r\n                const iXDiff : number = iX - peak.iX;\r\n                const iYDiff : number = iY - peak.iY;\r\n                const distanceFromPeak : number = Math.sqrt(iXDiff*iXDiff + iYDiff*iYDiff);\r\n                let peakContribution : number;\r\n                if (distanceFromPeak > peak.halfWidth) {\r\n                    peakContribution = 0;\r\n                } else {\r\n                    // distScaleOfZ is how we need to scale distance values relative to the z-scale (height) to get the bottom of the \r\n                    //  mountain to be halfWidth cells away (assuming a cosine function shifted up by half the peak height)\r\n                    const distScaleOfZ : number = Math.PI / peak.halfWidth;\r\n                    // dont let the peak contribute be negative, just to avoid negative costs which dijkstra's cant handle\r\n                    peakContribution = Math.max(0, 0.5*(Math.cos(distanceFromPeak * distScaleOfZ) + peak.cost));\r\n                    // we add to the total cost in order to accumulate \"height\" from the all nearby peaks,\r\n                    //  rather than overwrite it and wind up with sudden cliffs\r\n                }\r\n                cellCost += peakContribution;\r\n            }\r\n            // perturbation is between -100% and 100% of maxPerturbation*cellCost\r\n            const perturbation : number = (cellCost * MAX_PERTURBATION_PROP) * (2 * Math.random() - 1);\r\n            cellCost += perturbation;\r\n            cost.get(iY)!.set(iX, cellCost);\r\n            if (cellCost > maxCost) {\r\n                maxCost = cellCost;\r\n            }\r\n        }\r\n    }\r\n\r\n    // to finalize the cost surface, we need to scale the randomized costs to be between 0 and the\r\n    //  randomness parameter and add this to the determinism such that the value for any cell\r\n    //  is between 0 and 1 (not strictly necessary, but it is easier for me to think about this way),\r\n    //  with the appropriate amounts coming from the deterministic and random portions\r\n    const determinism : number = 1 - randomness;\r\n    for (let iY of cost.keys()) {\r\n        for (let iX of cost.get(iY)!.keys()) {\r\n            const randomizedCost : number = cost.get(iY)!.get(iX)!;\r\n            const scaledRandomizedCost : number = randomness * (randomizedCost / maxCost);\r\n            const finalCost : number = scaledRandomizedCost + determinism;\r\n            cost.get(iY)!.set(iX, finalCost);\r\n        }\r\n    }\r\n    return cost;\r\n}\r\n\r\n\r\nfunction dijkstras(grid : Grid, cost : Map<number, Map<number, number>>, source : Cell, destination : Cell) : Cell[] {\r\n    const cells : Map<number, Map<number, Cell>> = grid.getCells();\r\n    const distances : Map<number, Map<number, number>> = new Map<number, Map<number, number>>();\r\n    const previous : Map<number, Map<number, Cell>> = new Map<number, Map<number, Cell>>();\r\n    const unvisitedCells : Set<Cell> = new Set<Cell>();\r\n    for (let iY of cells.keys()) {\r\n         distances.set(iY, new Map<number, number>());\r\n         previous.set(iY, new Map<number, Cell>());\r\n        for (let iX of cells.get(iY)!.keys()) {\r\n            let distance : number = Number.POSITIVE_INFINITY;\r\n            if ((iY === source.getIY()) && (iX === source.getIX())) {\r\n                distance = 0;\r\n            }\r\n            distances.get(iY)!.set(iX, distance);\r\n            unvisitedCells.add(cells.get(iY)!.get(iX)!);\r\n        }\r\n    }\r\n\r\n\r\n    // traverse the grid from source to destination\r\n    const candidateNextCells : Set<Cell> = new Set<Cell>([source]);\r\n    let iteration : number = 0;\r\n    while (candidateNextCells.size > 0) {\r\n        let current : Cell | null = getNext(distances, candidateNextCells);\r\n        if (current === null) {\r\n            throw new Error(`No path between ${source} and ${destination}`);\r\n            \r\n        } else if (current.cospatial(destination)) {\r\n            break;\r\n        }\r\n        unvisitedCells.delete(current);\r\n        candidateNextCells.delete(current);\r\n        const iY : number = current.getIY();\r\n        const iX : number = current.getIX();\r\n        const currentDistance : number = distances.get(iY)!.get(iX)!;\r\n        for (let neighbor of grid.getNeighbors(current)) {\r\n            if (neighbor.isTraversable() && unvisitedCells.has(neighbor)) {\r\n                const nbrIY : number = neighbor.getIY();\r\n                const nbrIX : number = neighbor.getIX();\r\n                const neighborDistance : number = distances.get(nbrIY)!.get(nbrIX)!;\r\n                const distanceWithCurrent : number = currentDistance + cost.get(nbrIY)!.get(nbrIX)!;\r\n                if (distanceWithCurrent < neighborDistance) {\r\n                    distances.get(nbrIY)!.set(nbrIX, distanceWithCurrent);\r\n                    candidateNextCells.add(neighbor);\r\n                    previous.get(nbrIY)!.set(nbrIX, current);\r\n                }\r\n            }\r\n        }\r\n        Events.GENERATOR_STATUS_INFO.fire(`Direct iteration: ${iteration++}`);\r\n    }\r\n\r\n\r\n    // back-track to get the path\r\n    const path : Cell[] = [destination];\r\n    let current : Cell = destination;\r\n    while (!current.cospatial(source)) {\r\n        current = previous.get(current.getIY())!.get(current.getIX())!;\r\n        if ((current === null) || (current === undefined)) {\r\n            throw new Error(`No path between ${source} and ${destination}`);\r\n        }\r\n        path.push(current);\r\n    }\r\n    path.reverse();\r\n    return path;\r\n}\r\n\r\n\r\nfunction getNext(distances : Map<number, Map<number, number>>, candidates : Set<Cell>) : Cell | null {\r\n    let minDistance : number = Number.POSITIVE_INFINITY;\r\n    let best : Cell | null = null;\r\n    for (let cell of candidates) {\r\n        const distance : number = distances.get(cell.getIY())!.get(cell.getIX())!;\r\n        if (distance < minDistance) {\r\n            best = cell;\r\n            minDistance = distance;\r\n        }\r\n    }\r\n    return best;\r\n}\r\n\r\n\r\nexport {direct}","enum Move {\r\n    E2E,  E2NE,  E2NW,  E2W,  E2SW,  E2SE,  E_IN,  E_OUT,\r\n    NE2E, NE2NE, NE2NW, NE2W, NE2SW, NE2SE, NE_IN, NE_OUT,\r\n    NW2E, NW2NE, NW2NW, NW2W, NW2SW, NW2SE, NW_IN, NW_OUT,\r\n    W2E,  W2NE,  W2NW,  W2W,  W2SW,  W2SE,  W_IN,  W_OUT,\r\n    SW2E, SW2NE, SW2NW, SW2W, SW2SW, SW2SE, SW_IN, SW_OUT,\r\n    SE2E, SE2NE, SE2NW, SE2W, SE2SW, SE2SE, SE_IN, SE_OUT\r\n}\r\n\r\nconst MOVES : Move[] = [\r\n    Move.E2E,  Move.E2NE,  Move.E2NW,  Move.E2W,  Move.E2SW,  Move.E2SE,  Move.E_IN,  Move.E_OUT,\r\n    Move.NE2E, Move.NE2NE, Move.NE2NW, Move.NE2W, Move.NE2SW, Move.NE2SE, Move.NE_IN, Move.NE_OUT,\r\n    Move.NW2E, Move.NW2NE, Move.NW2NW, Move.NW2W, Move.NW2SW, Move.NW2SE, Move.NW_IN, Move.NW_OUT,\r\n    Move.W2E,  Move.W2NE,  Move.W2NW,  Move.W2W,  Move.W2SW,  Move.W2SE,  Move.W_IN,  Move.W_OUT,\r\n    Move.SW2E, Move.SW2NE, Move.SW2NW, Move.SW2W, Move.SW2SW, Move.SW2SE, Move.SW_IN, Move.SW_OUT,\r\n    Move.SE2E, Move.SE2NE, Move.SE2NW, Move.SE2W, Move.SE2SW, Move.SE2SE, Move.SE_IN, Move.SE_OUT\r\n];\r\n\r\nenum Direction {\r\n    E, NE, NW, W, SW, SE\r\n}\r\n\r\n\r\nconst DIRECTIONS : Direction[] = [Direction.E, Direction.NE, Direction.NW, Direction.W, Direction.SW, Direction.SE];\r\n\r\n\r\nconst DIRECTION_TO_MOVE : Map<Direction, Map<Direction, Move>> = new Map<Direction, Map<Direction, Move>>();\r\nDIRECTION_TO_MOVE.set(Direction.E, new Map<Direction, Move>());\r\nDIRECTION_TO_MOVE.get(Direction.E)!.set(Direction.E, Move.E2E);\r\nDIRECTION_TO_MOVE.get(Direction.E)!.set(Direction.NE, Move.E2NE);\r\nDIRECTION_TO_MOVE.get(Direction.E)!.set(Direction.NW, Move.E2NW);\r\nDIRECTION_TO_MOVE.get(Direction.E)!.set(Direction.W, Move.E2W);\r\nDIRECTION_TO_MOVE.get(Direction.E)!.set(Direction.SW, Move.E2SW);\r\nDIRECTION_TO_MOVE.get(Direction.E)!.set(Direction.SE, Move.E2SE);\r\n\r\nDIRECTION_TO_MOVE.set(Direction.NE, new Map<Direction, Move>());\r\nDIRECTION_TO_MOVE.get(Direction.NE)!.set(Direction.E, Move.NE2E);\r\nDIRECTION_TO_MOVE.get(Direction.NE)!.set(Direction.NE, Move.NE2NE);\r\nDIRECTION_TO_MOVE.get(Direction.NE)!.set(Direction.NW, Move.NE2NW);\r\nDIRECTION_TO_MOVE.get(Direction.NE)!.set(Direction.W, Move.NE2W);\r\nDIRECTION_TO_MOVE.get(Direction.NE)!.set(Direction.SW, Move.NE2SW);\r\nDIRECTION_TO_MOVE.get(Direction.NE)!.set(Direction.SE, Move.NE2SE);\r\n\r\nDIRECTION_TO_MOVE.set(Direction.NW, new Map<Direction, Move>());\r\nDIRECTION_TO_MOVE.get(Direction.NW)!.set(Direction.E, Move.NW2E);\r\nDIRECTION_TO_MOVE.get(Direction.NW)!.set(Direction.NE, Move.NW2NE);\r\nDIRECTION_TO_MOVE.get(Direction.NW)!.set(Direction.NW, Move.NW2NW);\r\nDIRECTION_TO_MOVE.get(Direction.NW)!.set(Direction.W, Move.NW2W);\r\nDIRECTION_TO_MOVE.get(Direction.NW)!.set(Direction.SW, Move.NW2SW);\r\nDIRECTION_TO_MOVE.get(Direction.NW)!.set(Direction.SE, Move.NW2SE);\r\n\r\nDIRECTION_TO_MOVE.set(Direction.W, new Map<Direction, Move>());\r\nDIRECTION_TO_MOVE.get(Direction.W)!.set(Direction.E, Move.W2E);\r\nDIRECTION_TO_MOVE.get(Direction.W)!.set(Direction.NE, Move.W2NE);\r\nDIRECTION_TO_MOVE.get(Direction.W)!.set(Direction.NW, Move.W2NW);\r\nDIRECTION_TO_MOVE.get(Direction.W)!.set(Direction.W, Move.W2W);\r\nDIRECTION_TO_MOVE.get(Direction.W)!.set(Direction.SW, Move.W2SW);\r\nDIRECTION_TO_MOVE.get(Direction.W)!.set(Direction.SE, Move.W2SE);\r\n\r\nDIRECTION_TO_MOVE.set(Direction.SW, new Map<Direction, Move>());\r\nDIRECTION_TO_MOVE.get(Direction.SW)!.set(Direction.E, Move.SW2E);\r\nDIRECTION_TO_MOVE.get(Direction.SW)!.set(Direction.NE, Move.SW2NE);\r\nDIRECTION_TO_MOVE.get(Direction.SW)!.set(Direction.NW, Move.SW2NW);\r\nDIRECTION_TO_MOVE.get(Direction.SW)!.set(Direction.W, Move.SW2W);\r\nDIRECTION_TO_MOVE.get(Direction.SW)!.set(Direction.SW, Move.SW2SW);\r\nDIRECTION_TO_MOVE.get(Direction.SW)!.set(Direction.SE, Move.SW2SE);\r\n\r\nDIRECTION_TO_MOVE.set(Direction.SE, new Map<Direction, Move>());\r\nDIRECTION_TO_MOVE.get(Direction.SE)!.set(Direction.E, Move.SE2E);\r\nDIRECTION_TO_MOVE.get(Direction.SE)!.set(Direction.NE, Move.SE2NE);\r\nDIRECTION_TO_MOVE.get(Direction.SE)!.set(Direction.NW, Move.SE2NW);\r\nDIRECTION_TO_MOVE.get(Direction.SE)!.set(Direction.W, Move.SE2W);\r\nDIRECTION_TO_MOVE.get(Direction.SE)!.set(Direction.SW, Move.SE2SW);\r\nDIRECTION_TO_MOVE.get(Direction.SE)!.set(Direction.SE, Move.SE2SE);\r\n\r\nexport {Move, MOVES, Direction, DIRECTIONS, DIRECTION_TO_MOVE}","import { Events } from \"../../components/events/events\";\r\nimport { Cell } from \"../cell/cell\";\r\nimport { Grid } from \"../grid/grid\";\r\nimport { Direction, DIRECTIONS } from \"../path/moves\";\r\nimport { DEFAULT_DRUNKARD_CONFIG, DrunkardConfig } from \"./config\";\r\nimport { defaultValue, extractPathTerminals, shuffleToNew } from \"./util\";\r\n\r\n/**\r\n * Generates enemy route(s) by taking a random walk across the grid. I'd be there in a jiffy, if only the\r\n * world werent so topsy turvy. \r\n * \r\n * @param grid analysis grid to pull forcings and grid size from\r\n * @param config settings to use for this route generation\r\n */\r\nfunction drunkard(grid : Grid, config? : DrunkardConfig) : Cell[][] {\r\n    \r\n    // update and validate configs\r\n    const safeConfig : DrunkardConfig = config === undefined ? DEFAULT_DRUNKARD_CONFIG : config;\r\n    const numEntrances : number = defaultValue(safeConfig.numEntrances, DEFAULT_DRUNKARD_CONFIG.numEntrances)!;\r\n    const numExits : number = defaultValue(safeConfig.numExits, DEFAULT_DRUNKARD_CONFIG.numExits)!;\r\n    \r\n    // stumble about (brownian motion) until we get to all exits\r\n    const pathTerminals : Cell[][] = extractPathTerminals(grid, numEntrances, numExits);\r\n    let iteration = 0;\r\n    const paths : Cell[][] = [];\r\n    for (let terminals of pathTerminals) {\r\n        const entrance : Cell = terminals[0];\r\n        const exit : Cell = terminals[1];\r\n        let current : Cell = entrance;\r\n        const path : Cell[] = [current];\r\n        while (current !== exit) {\r\n            const neighbor : Cell | null = findATraversableNeighbor(grid, current);\r\n            if (neighbor === null) {\r\n                throw new Error(\"Cant find a valid neighbor. Giving up.\");\r\n            }\r\n            current = neighbor;\r\n            path.push(current);\r\n            Events.GENERATOR_STATUS_INFO.fire(`Iteration: ${iteration++}`);\r\n        }\r\n        paths.push(path);\r\n    }\r\n    return paths;\r\n}\r\n\r\n\r\nfunction findATraversableNeighbor(grid : Grid, cell : Cell) : Cell | null {\r\n    let neighbor : Cell | null = null;\r\n    let directions : Direction[] = shuffleToNew(DIRECTIONS);\r\n    for (let direction of directions) {\r\n        if (neighbor !== null) break;\r\n        neighbor = grid.getNeighborTowardDirection(cell, direction);\r\n        if ((neighbor !== null) && !neighbor.isTraversable()) {\r\n            neighbor = null;\r\n        }\r\n    }\r\n    return neighbor;\r\n}\r\n\r\n\r\nexport {drunkard}","import { Cell } from \"../cell/cell\";\r\nimport { Forcing } from \"../cell/forcing\";\r\nimport { Grid } from \"../grid/grid\";\r\nimport { DEFAULT_THE_TRAVELING_GNOME_CONFIG, TheTravelingGnomeConfig } from \"./config\";\r\nimport { direct } from \"./direct\";\r\nimport { shuffleInPlace, defaultValue, extractPathTerminals } from \"./util\";\r\n\r\nconst DETOUR_MAX_DISTANCE_FROM_START : number = 7;\r\n\r\n/**\r\n * Generates enemy route(s) by taking detours along a direct(ish) route from entrance(s) to exit(s). The\r\n * number of detours and tortuosity of detours is controlled by the wandering parameter.\r\n * \r\n * @param grid analysis grid to pull forcings and grid size from\r\n * @param config settings to use for this route generation\r\n */\r\nfunction theTravelingGnome(grid : Grid, config? : TheTravelingGnomeConfig) : Cell[][] {\r\n    \r\n    // update and validate configs\r\n    const safeConfig : TheTravelingGnomeConfig = config === undefined ? DEFAULT_THE_TRAVELING_GNOME_CONFIG : config;\r\n    const numEntrances : number = defaultValue(safeConfig.numEntrances, DEFAULT_THE_TRAVELING_GNOME_CONFIG.numEntrances)!;\r\n    const numExits : number = defaultValue(safeConfig.numExits, DEFAULT_THE_TRAVELING_GNOME_CONFIG.numExits)!;\r\n    const wandering : number = defaultValue(safeConfig.wandering, DEFAULT_THE_TRAVELING_GNOME_CONFIG.wandering)!;\r\n    if ((wandering < 0) || (wandering > 1)) {\r\n        throw new Error(\"Wandering must be between 0 and 1, but it was \" + wandering);\r\n    }\r\n    \r\n    \r\n    // move toward the exits, but with some sightseeing along the way\r\n    const pathTerminals : Cell[][] = extractPathTerminals(grid, numEntrances, numExits);\r\n    const paths : Cell[][] = [];\r\n    for (let terminals of pathTerminals) {\r\n        const entrance : Cell = terminals[0];\r\n        const exit : Cell = terminals[1];\r\n        let path : Cell[] = generateDirectRoute(grid, entrance, exit, wandering);\r\n        // Detour interval is how often we will take a detour in terms of number of cells along the path between the\r\n        //  approximate end of each detour and the start of the next. In the formula below, we use half the original\r\n        //  path length such that at low levels of wandering, we'll take one or so detours just in the middle of the\r\n        //  path, rather than really close to the exit (though for some values of wandering we'll still end up in that\r\n        //  situation). Also ensure that minimum detour interval 2 cells. Otherwise the detour can keep happening on the\r\n        //  same cell (I think).\r\n        if (path && (path.length > 0)) {\r\n            const detourInterval : number = (wandering === 0) ? Number.MAX_SAFE_INTEGER : Math.max(Math.ceil((path.length / 2.0) * (1-wandering)), 2);\r\n            let nextDetourIndex : number = detourInterval;\r\n            while (nextDetourIndex < (path.length - 1)) {\r\n                const detourResult : DetourResult = takeADetour(grid, path, nextDetourIndex, wandering);\r\n                const detourLength : number = detourResult.path.length - path.length;\r\n                path = detourResult.path;\r\n                nextDetourIndex = detourResult.detourStartIndex + detourLength + detourInterval;\r\n            }\r\n            paths.push(path);\r\n        }\r\n    }\r\n    return paths;\r\n}\r\n\r\n\r\ninterface DetourResult {\r\n    path : Cell[],\r\n    detourDestinationIndex : number,\r\n    detourStartIndex : number\r\n}\r\n\r\n\r\nfunction takeADetour(grid : Grid, path : Cell[], detourStartIndex : number, wandering : number) : DetourResult {\r\n    const detourStart : Cell = path[detourStartIndex];\r\n    const detourDestination : Cell = generateDetourDestination(grid, detourStart);\r\n    let pathFromStartToDest : Cell[] = generateDirectRoute(grid, detourStart, detourDestination, wandering);\r\n    let pathFromDestToExit : Cell[] = generateDirectRoute(grid, detourDestination, path[path.length-1], wandering);\r\n    if (!pathFromStartToDest || !pathFromDestToExit) {\r\n        return {path: path, detourDestinationIndex: detourStartIndex, detourStartIndex: detourStartIndex};\r\n    }\r\n    const newPath : Cell[] = path.slice(0, detourStartIndex);\r\n    newPath.push(...pathFromStartToDest);\r\n    // want to only add the detour destination to the output path once. It will already be added from startToDetourPath\r\n    pathFromDestToExit.shift();\r\n    newPath.push(...pathFromDestToExit);\r\n    return {path: newPath, detourDestinationIndex: detourStartIndex + pathFromStartToDest.length-1, detourStartIndex: detourStartIndex}\r\n}\r\n\r\n\r\nfunction generateDetourDestination(grid : Grid, start : Cell) : Cell {\r\n    const candidates : Cell[] = grid.getCellsFlat();\r\n    shuffleInPlace(candidates);\r\n    for (let candidate of candidates) {\r\n        if (candidate.isTraversable() && (distance(start, candidate) <= DETOUR_MAX_DISTANCE_FROM_START)) {\r\n            return candidate;\r\n        }\r\n    }\r\n    // This will never happen afaict, because at worst we'll return the starting cell itself in the above loop\r\n    return start;\r\n}\r\n\r\n\r\nfunction generateDirectRoute(grid : Grid, start : Cell, stop : Cell, wandering : number) : Cell[] {\r\n    if (start.cospatial(stop)) {\r\n        return [stop];\r\n    }\r\n    const tripLegGrid = grid.deepCopy([Forcing.NOT_TRAVERSABLE]);\r\n    tripLegGrid.getCell(start.getIY(), start.getIX())!.setForcing(Forcing.ENTRANCE);\r\n    tripLegGrid.getCell(stop.getIY(), stop.getIX())!.setForcing(Forcing.EXIT);\r\n    const directRouteResult : Cell[][] = direct(tripLegGrid, {randomness: wandering});\r\n    if (directRouteResult != null) {\r\n        return directRouteResult[0];\r\n    }\r\n    return [];\r\n}\r\n\r\n\r\nfunction distance(a : Cell, b : Cell) : number {\r\n    const iXDiff = a.getIX() - b.getIX();\r\n    const iYDiff = a.getIY() - b.getIY();\r\n    return Math.sqrt(iXDiff*iXDiff + iYDiff*iYDiff);\r\n}\r\n\r\n\r\nexport {theTravelingGnome}","import { Cell } from \"../cell/cell\";\r\nimport { Grid } from \"../grid/grid\";\r\nimport { \r\n    DirectRouteConfig, \r\n    DrunkardConfig, \r\n    TheTravelingGnomeConfig } from \"./config\";\r\nimport { direct } from \"./direct\";\r\nimport { drunkard } from \"./drunkard\";\r\nimport { theTravelingGnome } from \"./gnome\";\r\n\r\n/**\r\n * Main service class for generating routes. A container for the various algorithms.\r\n */\r\nclass Generator {\r\n\r\n    /**\r\n     * Generates enemy route(s) attempting to take a direct route from entrance(s) to exit(s). Routes are\r\n     * generated using dijkstra's algorithm with a randomly generated cost surface that looks (roughly) like\r\n     * mountainness terrain. Increasing the randomness of the algorithm results in an attempt to create more\r\n     * circuitous routes from from entrance to exit.\r\n     * \r\n     * @param grid analysis grid to pull forcings and grid size from\r\n     * @param config settings to use for this route generation\r\n     */\r\n    public static generateDirectRoutePaths(grid : Grid, config? : DirectRouteConfig) : Cell[][] {\r\n        return direct(grid, config);\r\n    }\r\n\r\n\r\n    /**\r\n     * Generates enemy route(s) by taking a random walk across the grid. I'd be there in a jiffy, if only the\r\n     * world werent so topsy turvy. \r\n     * \r\n     * @param grid analysis grid to pull forcings and grid size from\r\n     * @param config settings to use for this route generation\r\n     */\r\n    public static generateDrunkardPaths(grid : Grid, config? : DrunkardConfig) : Cell[][] {\r\n        return drunkard(grid, config);\r\n    }\r\n\r\n\r\n    /**\r\n     * Generates enemy route(s) by taking detours along a direct(ish) route from entrance(s) to exit(s). The\r\n     * number of detours and tortuosity of detours is controlled by the wandering parameter.\r\n     * \r\n     * @param grid analysis grid to pull forcings and grid size from\r\n     * @param config settings to use for this route generation\r\n     */\r\n    public static generateTheTravelingGnomePaths(grid : Grid, config? : TheTravelingGnomeConfig) : Cell[][] {\r\n        return theTravelingGnome(grid, config);\r\n    }\r\n}\r\n\r\nexport {Generator};","import { Forcing } from \"./forcing\";\r\n\r\n/** Analysis cell, for storing state of cells in the grid. */\r\nclass Cell {\r\n    private iY : number;\r\n    private iX : number;\r\n    private forcing : Forcing = Forcing.NONE;\r\n\r\n    /**\r\n     * @param iY cell row (assumes top-to-bottom orientation of grid)\r\n     * @param iX cell column\r\n     */\r\n    public constructor(iY : number, iX : number) {\r\n        this.iY = iY;\r\n        this.iX = iX;\r\n    }\r\n\r\n\r\n    /**\r\n     * @returns cell column\r\n     */\r\n    public getIX() : number {\r\n        return this.iX;\r\n    }\r\n\r\n\r\n    /**\r\n     * @returns cell row (assumes top-to-bottom orientation of grid)\r\n     */\r\n    public getIY() : number {\r\n        return this.iY;\r\n    }\r\n\r\n\r\n    /**\r\n     * @returns true if this cell's forcing is not {@link Forcing.NOT_TRAVERSABLE}\r\n     */\r\n    public isTraversable() : boolean {\r\n        return Forcing.NOT_TRAVERSABLE !== this.forcing;\r\n    }\r\n\r\n\r\n    /**\r\n     * @returns true if this cell's forcing is {@link Forcing.ENTRANCE}\r\n     */\r\n    public isEntrance() : boolean {\r\n        return Forcing.ENTRANCE === this.forcing;\r\n    }\r\n\r\n\r\n    /**\r\n     * @returns true if this cell's forcing is not {@link Forcing.EXIT}\r\n     */\r\n    public isExit() : boolean {\r\n        return Forcing.EXIT === this.forcing;\r\n    }\r\n\r\n\r\n    /**\r\n     * @returns cell's forcing (see {@link Forcing})\r\n     */\r\n    public getForcing() : Forcing {\r\n        return this.forcing;\r\n    }\r\n\r\n\r\n    /**\r\n     * Sets the cell's forcing. A cell can only have one forcing at a time.\r\n     * \r\n     * @param forcing forcing to give the cell\r\n     */\r\n    public setForcing(forcing : Forcing) : void {\r\n        this.forcing = forcing;\r\n    }\r\n\r\n\r\n    /**\r\n     * \r\n     * @param copyForcings forcings that should be retained to the output cell\r\n     * @returns fresh instance of a {@link Cell} with this cell's state\r\n     */\r\n    public deepCopy(copyForcings? : Forcing[]) : Cell {\r\n        const copy : Cell = new Cell(this.iY, this.iX);\r\n        if (copyForcings && copyForcings.includes(this.forcing)) {\r\n            copy.setForcing(this.forcing);\r\n        }\r\n        return copy;\r\n    }\r\n\r\n\r\n    /**\r\n     * @param other cell to compare against\r\n     * @returns true if this cell has identical attributes to the given cell\r\n     */\r\n    public identical(other : Cell | null | undefined) : boolean {\r\n        return this.cospatial(other) && (this.forcing === other!.forcing);\r\n    }\r\n\r\n\r\n    /**\r\n     * @param other cell to compare against\r\n     * @returns true if this cell has the same position in the grid as the given cell\r\n     */\r\n    public cospatial(other : Cell | null | undefined) : boolean {\r\n        return (other !== undefined) \r\n            && (other !== null)\r\n            && (this.iY === other.iY) \r\n            && (this.iX === other.iX);\r\n    }\r\n\r\n\r\n    public toString() : string {\r\n        return `Cell(${this.iY}, ${this.iX}, ${Forcing[this.forcing]})`;\r\n    }\r\n}\r\n\r\nexport {Cell};","import { Cell } from \"../cell/cell\";\r\nimport { Forcing } from \"../cell/forcing\";\r\nimport { Direction, DIRECTIONS, DIRECTION_TO_MOVE, Move } from \"../path/moves\";\r\n\r\n/**\r\n * This hexagonal grid class is a container and manager of hexagonal grid cells. Cells are\r\n * assumed to be arranged vertex-up (as opposed to having a side/edge at the top). Columns are\r\n * shared between cells on different rows, such that the total number of cells in a given row\r\n * is approximately half the number of of configured columns. The easiest way to think of this arrangement\r\n * is that half - the odd-indexed half - of the rows are shifted right by half of a cell's width. So,\r\n * cell (row=1, column=0) will be shifted to the right of cell (row=0, column=0). Despite the fact that\r\n * the aforementioned cells share the same column index, they are considered to be in different columns.\r\n */\r\nclass Grid implements Iterable<Cell> {\r\n    private static readonly PI_OVER_SIX : number = Math.PI / 6.0;\r\n    private static readonly E_NBR_END : number = Grid.PI_OVER_SIX;\r\n    private static readonly NE_NBR_END : number = 3 * Grid.PI_OVER_SIX;\r\n    private static readonly NW_NBR_END : number = 5.0 * Grid.PI_OVER_SIX;\r\n    private static readonly W_NBR_END : number = 7.0 * Grid.PI_OVER_SIX;\r\n    private static readonly SW_NBR_END : number = 9.0 * Grid.PI_OVER_SIX;\r\n    private static readonly SE_NBR_END : number = 11.0 * Grid.PI_OVER_SIX;\r\n    \r\n    private readonly cells : Map<number, Map<number, Cell>>;\r\n    private readonly nColumnsOnEvenIndexRows : number;\r\n    private readonly nColumnsOnOddIndexRows : number;\r\n    private readonly nCells : number;\r\n\r\n    private constructor(cells : Map<number, Map<number, Cell>>) {\r\n        this.cells = cells;\r\n        let nColumnsOnEvenIndexRows : number = 0;\r\n        let nColumnsOnOddIndexRows : number = 0;\r\n        let nEvenRows : number = Math.ceil(cells.size / 2.0);\r\n        let nOddRows : number = cells.size - nEvenRows;\r\n        if (cells.size > 0) {\r\n            nColumnsOnEvenIndexRows = cells.get(0)!.size;\r\n        }\r\n        if (cells.size > 1) {\r\n            nColumnsOnOddIndexRows = cells.get(1)!.size;\r\n        }\r\n        this.nColumnsOnEvenIndexRows = nColumnsOnEvenIndexRows;\r\n        this.nColumnsOnOddIndexRows = nColumnsOnOddIndexRows;\r\n        this.nCells = nColumnsOnEvenIndexRows * nEvenRows + nColumnsOnOddIndexRows + nOddRows;\r\n    }\r\n\r\n\r\n    /**\r\n     * Creates a grid with nominally the number of rows and columns given. See the description of\r\n     * this class for more on how the grid is structured.\r\n     * \r\n     * @param sizeY number of rows the grid should have\r\n     * @param sizeX number of columns the grid should have (each row will have approximately half the number of requested columns)\r\n     */\r\n    public static ofNominalSize(sizeY : number, sizeX : number) : Grid {\r\n        const cells : Map<number, Map<number, Cell>> = new Map<number, Map<number, Cell>>();\r\n\r\n        // If the number of request columns is odd, then on every odd-index row, you'll have one less column than on the even-index rows. In other words,\r\n        //  put the extra column on the even-index rows.\r\n        // If the number of request columns is even, then on every row you'll have the same number of columns.\r\n        const nColumnsOnEvenIndexRows : number = Math.floor(0.5*sizeX) + (sizeX % 2);\r\n        const nColumnsOnOddIndexRows : number =  Math.floor(0.5*sizeX);\r\n\r\n        for (let iY = 0; iY < sizeY; iY++) {\r\n            let nColIterated : number = ((iY % 2) === 0) ? nColumnsOnEvenIndexRows : nColumnsOnOddIndexRows;\r\n            cells.set(iY, new Map<number, Cell>());\r\n            for (let iX = 0; iX < nColIterated; iX++) {\r\n                cells.get(iY)!.set(iX, new Cell(iY, iX));\r\n            }\r\n        }\r\n        return new Grid(cells);\r\n    }\r\n\r\n\r\n    /**\r\n     * @param cell cell for which to get neighbors\r\n     * @returns all neighbors for the given cell\r\n     */\r\n    public getNeighbors(cell : Cell) : Cell[] {\r\n        const neighbors : Cell[] = [];\r\n        for (let direction of DIRECTIONS) {\r\n            const neighbor : Cell | null = this.getNeighborTowardDirection(cell, direction);\r\n            if (neighbor !== null) {\r\n                neighbors.push(neighbor);\r\n            }\r\n        }\r\n        return neighbors;\r\n    }\r\n\r\n\r\n    /**\r\n     * @param angleRadians direction to look, based on unit circle angle\r\n     * @returns neighboring cell in that direction, or null if there isnt one\r\n     */\r\n    public getNeighborTowardAngle(cell : Cell, angleRadians : number) : Cell | null {\r\n        // based on dividng the hexagon in six parts, figure out\r\n        //  which neighbor is in the direction of the given angle\r\n        // Also, assumes odd numbered rows are shifted right compared to even-numbered rows.\r\n        angleRadians = angleRadians % (2*Math.PI);\r\n        let iXNbr : number | null = null;\r\n        let iYNbr : number | null = null;\r\n        const diffRowColumnShift : number = cell.getIY() % 2 === 0 ? -1 : 0;\r\n        if (angleRadians < Grid.E_NBR_END) {\r\n            iXNbr = cell.getIX() + 1;\r\n            iYNbr = cell.getIY();\r\n\r\n        } else if (angleRadians < Grid.NE_NBR_END) {\r\n            iXNbr = cell.getIX() + 1 + diffRowColumnShift;\r\n            iYNbr = cell.getIY() - 1;\r\n        \r\n        } else if (angleRadians < Grid.NW_NBR_END) {\r\n            iXNbr = cell.getIX() + diffRowColumnShift;\r\n            iYNbr = cell.getIY() - 1;\r\n\r\n        } else if (angleRadians < Grid.W_NBR_END) {\r\n            iXNbr = cell.getIX() - 1;\r\n            iYNbr = cell.getIY();\r\n\r\n        } else if (angleRadians < Grid.SW_NBR_END) {\r\n            iXNbr = cell.getIX() + diffRowColumnShift;\r\n            iYNbr = cell.getIY() + 1;\r\n\r\n        } else if (angleRadians < Grid.SE_NBR_END) {\r\n            iXNbr = cell.getIX() + 1 + diffRowColumnShift;\r\n            iYNbr = cell.getIY() + 1;\r\n\r\n        } else {\r\n            iXNbr = cell.getIX() + 1;\r\n            iYNbr = cell.getIY();\r\n        }\r\n\r\n        let neighbor : Cell | null = null;\r\n        if (this.cells.has(iYNbr) && (this.cells.get(iYNbr)!.has(iXNbr))) {\r\n            neighbor = this.cells.get(iYNbr)!.get(iXNbr)!;\r\n        }\r\n        return neighbor;\r\n    }\r\n\r\n\r\n    /**\r\n     * @param cell cell to look for a neighbor for\r\n     * @param direction direction to look\r\n     * @returns neighboring cell in that direction, or null if there isnt one\r\n     */\r\n    public getNeighborTowardDirection(cell : Cell, direction : Direction) : Cell | null {\r\n        let iXNbr : number | null = null;\r\n        let iYNbr : number | null = null;\r\n        const diffRowColumnShift : number = cell.getIY() % 2 === 0 ? -1 : 0;\r\n\r\n        switch (direction) {\r\n            case Direction.E:\r\n                iXNbr = cell.getIX() + 1;\r\n                iYNbr = cell.getIY();\r\n                break;\r\n\r\n            case Direction.NE:\r\n                iXNbr = cell.getIX() + 1 + diffRowColumnShift;\r\n                iYNbr = cell.getIY() - 1;\r\n                break;\r\n\r\n            case Direction.NW:\r\n                iXNbr = cell.getIX() + diffRowColumnShift;\r\n                iYNbr = cell.getIY() - 1;\r\n                break;\r\n\r\n            case Direction.W:\r\n                iXNbr = cell.getIX() - 1;\r\n                iYNbr = cell.getIY();\r\n                break;\r\n\r\n            case Direction.SW:\r\n                iXNbr = cell.getIX() + diffRowColumnShift;\r\n                iYNbr = cell.getIY() + 1;\r\n                break;\r\n\r\n            case Direction.SE:\r\n                iXNbr = cell.getIX() + 1 + diffRowColumnShift;\r\n                iYNbr = cell.getIY() + 1;\r\n                break;\r\n        }\r\n\r\n        let neighbor : Cell | null = null;\r\n        if (this.cells.has(iYNbr) && (this.cells.get(iYNbr)!.has(iXNbr))) {\r\n            neighbor = this.cells.get(iYNbr)!.get(iXNbr)!;\r\n        }\r\n        return neighbor;\r\n    }\r\n\r\n\r\n    /**\r\n     * @param source source cell to check angle to destination\r\n     * @param destination destination cell being triangulated to\r\n     * @returns angle (in radians) between center of source cell and destination cell\r\n     */\r\n    public static angleTowardOtherCell(source : Cell, destination : Cell) : number {\r\n        return Grid.directionBetween(source.getIY(), source.getIX(), destination.getIY(), destination.getIX());\r\n    }\r\n\r\n\r\n    /**\r\n     * @param rowSource row of the source cell\r\n     * @param colSource column of the source cell\r\n     * @param rowDest row of the destination cell\r\n     * @param colDest column of the desination cell\r\n     * @returns angle (in radians, from 0 to 2PI) in the hex grid using the coordinate system in this repo, such that the rows are ordered\r\n     *  from top to bottom, starting at 0, and columns are ordered from left to right, starting at 0, and such that every odd\r\n     *  row is shifted to the right of every even row (e.g. the northeast neighbor in an even row has the same column number, despite\r\n     *  being shifted to the right)\r\n     */\r\n    public static angleBetween(rowSource : number, colSource : number, rowDest : number, colDest : number) : number {\r\n        // xShift accounts for odd and even rows being shifted relative to one another. If both rows are the same type (odd or even),\r\n        //  then there's no shift to do. However, if one is odd and the other even, we need to shift the column difference\r\n        //  left or right depending on their relative orientations\r\n        const xShift : number = -0.5*((rowSource % 2) - (rowDest % 2));\r\n        const xDiff : number = colDest - colSource + xShift;\r\n\r\n        // yDiff is swapped from expected because rows are ordered from top to bottom instead of bottom to top, like they would be\r\n        //  in a normal Euclidean coordinate system\r\n        const yDiff : number = rowSource - rowDest;\r\n\r\n        // this last part accounts for the relative magnitudes of the width (2 times length of a side) and height (sqrt(3) times length of a side) \r\n        //  of a hexagon. Finally, the angle using trig is arc-tan of their ratio.\r\n        const angle = Math.atan2(2*yDiff, Math.sqrt(3)*xDiff);\r\n        const positiveAngle = angle < 0 ? (2*Math.PI + angle) : angle;\r\n        return positiveAngle;\r\n    }\r\n\r\n\r\n    /**\r\n     * @param rowSource row of the source cell\r\n     * @param colSource column of the source cell\r\n     * @param rowDest row of the destination cell\r\n     * @param colDest column of the desination cell\r\n     * @returns closest direction if taking a single step toward destination from the source in the hex grid using the coordinate system in this repo, \r\n     *  such that the rows are ordered from top to bottom, starting at 0, and columns are ordered from left to right, starting at 0, and such that every odd\r\n     *  row is shifted to the right of every even row (e.g. the northeast neighbor in an even row has the same column number, despite\r\n     *  being shifted to the right)\r\n     */\r\n    public static directionBetween(rowSource : number, colSource : number, rowDest : number, colDest : number) : Direction {\r\n        const angleRadians : number = Grid.angleBetween(rowSource, colSource, rowDest, colDest);\r\n        let result : Direction;\r\n        if (angleRadians < Grid.E_NBR_END) {\r\n            result = Direction.E\r\n\r\n        } else if (angleRadians < Grid.NE_NBR_END) {\r\n            result = Direction.NE;\r\n        \r\n        } else if (angleRadians < Grid.NW_NBR_END) {\r\n            result = Direction.NW;\r\n\r\n        } else if (angleRadians < Grid.W_NBR_END) {\r\n            result = Direction.W;\r\n\r\n        } else if (angleRadians < Grid.SW_NBR_END) {\r\n            result = Direction.SW;\r\n\r\n        } else if (angleRadians < Grid.SE_NBR_END) {\r\n            result = Direction.SE;\r\n\r\n        } else {\r\n            result = Direction.E;\r\n        }\r\n        return result;\r\n    }\r\n\r\n\r\n\r\n    /**\r\n     * \r\n     * @param source cell where route is coming from\r\n     * @param intermediate cell that route passes through\r\n     * @param destination cell where route is going to\r\n     * @returns move you would assign to the intermediate cell going from source to destination through intermediate\r\n     */\r\n    public getMoveTowardOtherCell(source : Cell | null, intermediate : Cell, destination : Cell | null) : Move {\r\n        let sourceDirection : Direction;\r\n        if (source === null) {\r\n            sourceDirection = this.findDirectionWithNoNeighbor(intermediate, Direction.E);\r\n        } else {\r\n            sourceDirection = Grid.directionBetween(intermediate.getIY(), intermediate.getIX(), source.getIY(), source.getIX());\r\n        }\r\n\r\n        let destinationDirection : Direction;\r\n        if (destination === null) {\r\n            destinationDirection = this.findDirectionWithNoNeighbor(intermediate, Direction.W);\r\n        } else {\r\n            destinationDirection = Grid.directionBetween(intermediate.getIY(), intermediate.getIX(), destination.getIY(), destination.getIX());\r\n        }\r\n\r\n        const move : Move = DIRECTION_TO_MOVE.get(sourceDirection)!.get(destinationDirection)!;\r\n        return move;\r\n    }\r\n\r\n\r\n    /**\r\n     * @param cell cell to look for no neighbor to\r\n     * @param defaultTo default direction to return if this cell is surrounded\r\n     * @returns the first direction where this cell doesnt have a neighbor\r\n     */\r\n    public findDirectionWithNoNeighbor(cell : Cell, defaultTo : Direction) : Direction {\r\n        for (let direction of DIRECTIONS) {\r\n            if (this.getNeighborTowardDirection(cell, direction) === null) {\r\n                return direction;\r\n            }\r\n        }\r\n        return defaultTo;\r\n    }\r\n\r\n\r\n    /**\r\n     * @returns all cells that are on the outside boundary of the grid\r\n     */\r\n    public getBoundaryCells() : Cell[] {\r\n        const boundaryCells : Cell[] = [];\r\n        for (let iY of this.cells.keys()) {\r\n            const row : Map<number, Cell> = this.cells.get(iY)!;\r\n            if ((iY === 0) || (iY === (this.cells.size - 1))) {\r\n                for (let iX of row.keys()) {\r\n                    boundaryCells.push(row.get(iX)!);\r\n                }\r\n            } else {\r\n                boundaryCells.push(row.get(0)!);\r\n                const nCellsOnRow : number = ((iY % 2) === 0) ? this.nColumnsOnEvenIndexRows : this.nColumnsOnOddIndexRows;\r\n                boundaryCells.push(row.get(nCellsOnRow - 1)!);\r\n            }\r\n        }\r\n        return boundaryCells;\r\n    }\r\n\r\n\r\n    /**\r\n     * @returns all cells that have been forced to be entrances\r\n     */\r\n    public getEntrances() : Cell[] {\r\n        const entrances : Cell[] = [];\r\n        for (let cell of this) {\r\n            if (cell.isEntrance()) {\r\n                entrances.push(cell);\r\n            }\r\n        }\r\n        return entrances;\r\n    }\r\n\r\n\r\n    /**\r\n     * @returns all cells that have been forced to be exits\r\n     */\r\n    public getExits() : Cell[] {\r\n        const entrances : Cell[] = [];\r\n        for (let cell of this) {\r\n            if (cell.isExit()) {\r\n                entrances.push(cell);\r\n            }\r\n        }\r\n        return entrances;\r\n    }\r\n\r\n\r\n    /**\r\n     * @param iY row index of the cell to get\r\n     * @param iX column index of the cell to get\r\n     * @returns the given cell if it exits, or undefined if it does not\r\n     */\r\n    public getCell(iY : number, iX : number) : Cell | undefined {\r\n        return this.cells.get(iY)?.get(iX);\r\n    }\r\n\r\n\r\n    /**\r\n     * @returns the cell map of this grid\r\n     */\r\n    public getCells() : Map<number, Map<number, Cell>> {\r\n        return this.cells;\r\n    }\r\n\r\n\r\n    /**\r\n     * @returns all cells in this grid as a flat array\r\n     */\r\n    public getCellsFlat() : Cell[] {\r\n        return [...this];\r\n    }\r\n\r\n\r\n    /**\r\n     * @returns number of cells in the grid\r\n     */\r\n    public getCellCount() : number {\r\n        return this.nCells;\r\n    }\r\n\r\n\r\n    /**\r\n     * @returns number of rows in the grid\r\n     */\r\n    public getRowCount() : number {\r\n        return this.cells.size;\r\n    }\r\n\r\n\r\n    /**\r\n     * @param row row to get column count for\r\n     * @returns the number of cells in the given row\r\n     */\r\n    public getColumnCount(row : number) : number {\r\n        return (row % 2) === 0 ? this.nColumnsOnEvenIndexRows : this.nColumnsOnOddIndexRows;\r\n    }\r\n\r\n\r\n    /**\r\n     * @returns the number of columns on even-indexed-rows (rows 0, 2, etc)\r\n     */\r\n    public getNumberOfColumnsOnEvenIndexRows() : number {\r\n        return this.nColumnsOnEvenIndexRows;\r\n    }\r\n\r\n\r\n    /**\r\n     * @returns the number of columns on odd-indexed-rows (rows 1, 3, etc)\r\n     */\r\n    public getNumberOfColumnsOnOddIndexRows() : number {\r\n        return this.nColumnsOnOddIndexRows;\r\n    }\r\n\r\n\r\n    /**\r\n     * @param copyForcings cell forcings that should be kept in the output grid\r\n     * @returns a deep copy of this grid, where every cell is new and unlinked to the cells in this grid\r\n     */\r\n    public deepCopy(copyForcings? : Forcing[]) : Grid {\r\n        const copy : Map<number, Map<number, Cell>> = new Map<number, Map<number, Cell>>();\r\n        for (let iY of this.cells.keys()) {\r\n            copy.set(iY, new Map<number, Cell>());\r\n            const row : Map<number, Cell> = this.cells.get(iY)!;\r\n            for (let iX of row.keys()) {\r\n                copy.get(iY)!.set(iX, row.get(iX)!.deepCopy(copyForcings));\r\n            }\r\n        } \r\n        return new Grid(copy);\r\n    }\r\n\r\n    [Symbol.iterator](): Iterator<Cell> {\r\n        return new CellIterator(this.cells);\r\n    }\r\n}\r\n\r\n\r\nclass CellIterator implements Iterator<Cell> {\r\n    private readonly cells : Map<number, Map<number, Cell>>;\r\n    private iY : number = 0;\r\n    private iX : number = 0;\r\n\r\n    constructor(cells : Map<number, Map<number, Cell>>) {\r\n        this.cells = cells;\r\n    }\r\n\r\n    next(value?: any): IteratorResult<Cell> {\r\n        let row : Map<number, Cell> = this.cells.get(this.iY)!;\r\n        if (row.size === this.iX) {\r\n            this.iX = 0;\r\n            this.iY += 1;\r\n            if (this.cells.size === this.iY) {\r\n                return {done: true, value: undefined};\r\n            }\r\n            row = this.cells.get(this.iY)!;\r\n        }\r\n        const result : Cell = row.get(this.iX)!;\r\n        this.iX += 1;\r\n        return {value: result, done: false};\r\n    }\r\n}\r\n\r\nexport {Grid};","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport * as React from \"react\";\n\nvar _ref2 = /*#__PURE__*/React.createElement(\"path\", {\n  className: \"cell-svg\",\n  d: \"M 101.89307,88.635079 51.60447,117.66921 1.3158779,88.635079 1.3158789,30.566814 51.604471,1.5326825 101.89307,30.566815 Z\",\n  id: \"hexagon\",\n  fill: \"current\",\n  stroke: \"current\",\n  strokeWidth: 2.5,\n  strokeMiterlimit: 4\n});\n\nfunction SvgHexagon(_ref, svgRef) {\n  var title = _ref.title,\n      titleId = _ref.titleId,\n      props = _objectWithoutProperties(_ref, [\"title\", \"titleId\"]);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    id: \"svg8\",\n    viewBox: \"0 0 103.22301 119.19167\",\n    height: \"100%\",\n    width: \"100%\",\n    position: \"absolute\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _ref2);\n}\n\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgHexagon);\nexport default __webpack_public_path__ + \"static/media/hexagon.744192fb.svg\";\nexport { ForwardRef as ReactComponent };","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport * as React from \"react\";\n\nvar _ref2 = /*#__PURE__*/React.createElement(\"path\", {\n  d: \"m 90.384462,45.273084 c -0.1212,0.01534 -0.23952,0.04824 -0.35116,0.09785 0,0 -2.465822,1.091736 -5.484066,2.828192 -3.018243,1.736457 -6.611379,4.097675 -8.998585,6.850254 -1.193603,1.376293 -2.111759,2.870947 -2.385343,4.529241 -0.273585,1.658295 0.220386,3.446245 1.557741,4.935809 1.406734,1.566807 3.644805,2.921434 6.975652,4.095768 -0.703975,1.407757 -1.750591,2.650478 -3.098831,3.589322 -0.379516,0.266272 -0.183509,0.863049 0.279979,0.852438 L 96.33657,72.630275 c 0.437461,-0.0093 0.624793,-0.559771 0.283829,-0.833998 -4.481416,-3.627299 -8.918415,-7.219045 -13.572516,-10.986353 -0.07519,-0.06113 -0.167475,-0.09746 -0.264162,-0.103988 -0.327041,-0.02116 -0.574302,0.291216 -0.478635,0.604666 0.492643,1.624855 0.552249,3.299094 0.22962,4.878509 -3.073311,-1.097633 -4.980253,-2.262859 -5.951088,-3.344167 -0.925678,-1.031013 -1.113392,-1.878815 -0.95149,-2.860163 0.161902,-0.981348 0.795745,-2.131799 1.807624,-3.298554 2.023762,-2.333513 5.454611,-4.649253 8.356039,-6.318507 2.901431,-1.669252 5.251855,-2.711234 5.251855,-2.711234 0.630268,-0.280436 0.914204,-1.01844 0.634429,-1.649002 -0.223212,-0.504208 -0.75044,-0.802596 -1.297612,-0.734394 z\",\n  stroke: \"none\",\n  fill: \"current\"\n});\n\nfunction SvgE2E(_ref, svgRef) {\n  var title = _ref.title,\n      titleId = _ref.titleId,\n      props = _objectWithoutProperties(_ref, [\"title\", \"titleId\"]);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    viewBox: \"0 0 103.22301 119.19167\",\n    height: \"100%\",\n    width: \"100%\",\n    style: {\n      position: \"absolute\"\n    },\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _ref2);\n}\n\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgE2E);\nexport default __webpack_public_path__ + \"static/media/e2e.279d4172.svg\";\nexport { ForwardRef as ReactComponent };","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport * as React from \"react\";\n\nvar _ref2 = /*#__PURE__*/React.createElement(\"path\", {\n  d: \"m 72.915931,22.859137 c 0.0301,0.05512 0.0489,0.115688 0.0552,0.178175 0.57962,5.927829 1.197,12.233254 1.70058,17.379011 0.0486,0.463132 -0.53463,0.706192 -0.82927,0.345569 -1.09855,-1.321778 -2.48308,-2.302125 -4.00043,-2.900358 -1.1295,3.802103 -1.27963,6.934822 -0.78267,9.504933 0.87517,4.526074 3.72537,7.497308 7.3144,9.572136 7.17805,4.149657 17.08932,4.233128 17.08932,4.233128 0.44873,7.41e-4 0.86263,0.24195 1.08448,0.632004 0.10725,0.188569 0.16367,0.401767 0.1636,0.618707 -6.4e-4,0.690708 -0.56135,1.249984 -1.25206,1.248853 0,0 -10.32678,0.06221 -18.33644,-4.568214 -4.00483,-2.315204 -7.486258,-5.925787 -8.517889,-11.26103 -0.582277,-3.01133 -0.392452,-6.512187 0.807594,-10.593692 -1.561184,-0.186492 -3.173458,0.0038 -4.69817,0.61194 -0.433016,0.173816 -0.826466,-0.322791 -0.558185,-0.70458 l 9.963,-14.339147 c 0.1634,-0.235263 0.49775,-0.270227 0.70631,-0.07397 0.0362,0.03383 0.0667,0.07312 0.0906,0.116541 z\",\n  stroke: \"none\",\n  fill: \"current\"\n});\n\nfunction SvgE2Ne(_ref, svgRef) {\n  var title = _ref.title,\n      titleId = _ref.titleId,\n      props = _objectWithoutProperties(_ref, [\"title\", \"titleId\"]);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    viewBox: \"0 0 103.22301 119.19167\",\n    height: \"100%\",\n    width: \"100%\",\n    style: {\n      position: \"absolute\"\n    },\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _ref2);\n}\n\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgE2Ne);\nexport default __webpack_public_path__ + \"static/media/e2ne.d17f0d50.svg\";\nexport { ForwardRef as ReactComponent };","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport * as React from \"react\";\n\nvar _ref2 = /*#__PURE__*/React.createElement(\"path\", {\n  d: \"m 29.751422,22.10428 c 0.12974,-0.211323 0.40167,-0.284977 0.62038,-0.168127 5.13547,2.739525 10.27091,5.47913 15.40632,8.218776 0.40511,0.218075 0.28649,0.828379 -0.17083,0.878785 -1.71355,0.182023 -3.30075,0.79384 -4.64252,1.729314 8.73752,10.240958 26.51009,25.882501 53.53681,25.740803 0.69073,-0.0038 1.25357,0.553421 1.25679,1.244143 0.003,0.689907 -0.55347,1.251802 -1.24337,1.255451 -27.90171,0.146296 -46.29628,-15.95616 -55.39012,-26.573919 -1.02516,1.19782 -1.76386,2.647623 -2.1038,4.257788 -0.0958,0.455182 -0.7245,0.508043 -0.89494,0.07524 l -6.41247,-16.241472 c -0.0423,-0.108399 -0.0429,-0.228655 -10e-4,-0.337409 0.0105,-0.02764 0.0237,-0.05422 0.0393,-0.07941 z\",\n  stroke: \"none\",\n  fill: \"current\"\n});\n\nfunction SvgE2Nw(_ref, svgRef) {\n  var title = _ref.title,\n      titleId = _ref.titleId,\n      props = _objectWithoutProperties(_ref, [\"title\", \"titleId\"]);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    viewBox: \"0 0 103.22301 119.19167\",\n    height: \"100%\",\n    width: \"100%\",\n    style: {\n      position: \"absolute\"\n    },\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _ref2);\n}\n\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgE2Nw);\nexport default __webpack_public_path__ + \"static/media/e2nw.83ee99f6.svg\";\nexport { ForwardRef as ReactComponent };","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport * as React from \"react\";\n\nvar _ref2 = /*#__PURE__*/React.createElement(\"path\", {\n  transform: \"scale(0.26458334)\",\n  d: \"m 90.294922,200.24805 a 1.7718307,1.7718307 0 0 0 -0.597656,0.11133 l -61.941407,22.78124 a 1.7718307,1.7718307 0 0 0 0,3.32032 l 61.941407,22.78125 A 1.7718307,1.7718307 0 0 0 91.75,246.54688 C 88.021746,241.3523 85.769048,235.45799 84.990234,229.43555 H 348.7207 a 4.7244094,4.7244094 0 0 0 4.72461,-4.72266 4.7244094,4.7244094 0 0 0 -4.72461,-4.72461 H 84.980469 c 0.766559,-6.00203 3.010846,-11.83327 6.753906,-16.91992 a 1.7718307,1.7718307 0 0 0 -1.439453,-2.82031 z\",\n  stroke: \"none\",\n  fill: \"current\"\n});\n\nfunction SvgE2W(_ref, svgRef) {\n  var title = _ref.title,\n      titleId = _ref.titleId,\n      props = _objectWithoutProperties(_ref, [\"title\", \"titleId\"]);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    viewBox: \"0 0 103.22301 119.19167\",\n    height: \"100%\",\n    width: \"100%\",\n    style: {\n      position: \"absolute\"\n    },\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _ref2);\n}\n\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgE2W);\nexport default __webpack_public_path__ + \"static/media/e2w.74ded3a7.svg\";\nexport { ForwardRef as ReactComponent };","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport * as React from \"react\";\n\nvar _ref2 = /*#__PURE__*/React.createElement(\"path\", {\n  d: \"m 29.749279,96.571986 c 0.129742,0.211321 0.401668,0.284976 0.620379,0.168125 5.135475,-2.739524 10.270908,-5.479128 15.406317,-8.218776 0.405118,-0.218075 0.286496,-0.828379 -0.170823,-0.878783 -1.713548,-0.182022 -3.300748,-0.79384 -4.642518,-1.729315 8.73752,-10.240958 26.510087,-25.882501 53.536803,-25.740803 0.69073,0.0038 1.25357,-0.553421 1.25679,-1.244143 0.003,-0.689907 -0.55347,-1.251802 -1.24337,-1.255451 -27.901708,-0.146296 -46.296281,15.95616 -55.39012,26.57392 -1.025153,-1.197821 -1.763862,-2.647624 -2.103793,-4.257789 -0.09578,-0.455182 -0.724503,-0.508043 -0.894942,-0.07524 l -6.412473,16.241472 c -0.04235,0.1084 -0.0429,0.228655 -0.0015,0.33741 0.01053,0.02764 0.02368,0.05422 0.03926,0.07941 z\",\n  stroke: \"none\",\n  fill: \"current\"\n});\n\nfunction SvgE2Sw(_ref, svgRef) {\n  var title = _ref.title,\n      titleId = _ref.titleId,\n      props = _objectWithoutProperties(_ref, [\"title\", \"titleId\"]);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    viewBox: \"0 0 103.22301 119.19167\",\n    height: \"100%\",\n    width: \"100%\",\n    style: {\n      position: \"absolute\"\n    },\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _ref2);\n}\n\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgE2Sw);\nexport default __webpack_public_path__ + \"static/media/e2sw.eb65b0f1.svg\";\nexport { ForwardRef as ReactComponent };","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport * as React from \"react\";\n\nvar _ref2 = /*#__PURE__*/React.createElement(\"path\", {\n  d: \"m 72.917893,95.890596 c 0.0301,-0.05512 0.0489,-0.115688 0.0552,-0.178175 0.57962,-5.927829 1.197,-12.233254 1.70058,-17.379011 0.0486,-0.463132 -0.53463,-0.706192 -0.82927,-0.345569 -1.09855,1.321778 -2.48308,2.302125 -4.00043,2.900358 -1.1295,-3.802103 -1.27963,-6.934822 -0.78267,-9.504933 0.87517,-4.526075 3.72537,-7.497309 7.3144,-9.572137 7.17805,-4.149656 17.08932,-4.233127 17.08932,-4.233127 0.44874,-7.93e-4 0.86263,-0.241951 1.08448,-0.632005 0.10725,-0.188568 0.16368,-0.401767 0.1636,-0.618707 -5.3e-4,-0.690708 -0.56135,-1.249984 -1.25205,-1.248851 0,0 -10.32679,-0.06221 -18.33645,4.568213 -4.00483,2.315202 -7.48625,5.925786 -8.51788,11.26103 -0.58228,3.01133 -0.39246,6.512187 0.80759,10.593692 -1.56119,0.186492 -3.17346,-0.0038 -4.69817,-0.61194 -0.43302,-0.173816 -0.82647,0.322791 -0.55819,0.70458 l 9.963,14.339147 c 0.1634,0.235263 0.49775,0.270227 0.70631,0.07397 0.0362,-0.03383 0.0667,-0.07312 0.0906,-0.116541 z\",\n  stroke: \"none\",\n  fill: \"current\"\n});\n\nfunction SvgE2Se(_ref, svgRef) {\n  var title = _ref.title,\n      titleId = _ref.titleId,\n      props = _objectWithoutProperties(_ref, [\"title\", \"titleId\"]);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    viewBox: \"0 0 103.22301 119.19167\",\n    height: \"100%\",\n    width: \"100%\",\n    style: {\n      position: \"absolute\"\n    },\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _ref2);\n}\n\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgE2Se);\nexport default __webpack_public_path__ + \"static/media/e2se.22ab3828.svg\";\nexport { ForwardRef as ReactComponent };","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport * as React from \"react\";\n\nvar _ref2 = /*#__PURE__*/React.createElement(\"path\", {\n  d: \"m 55.310989,59.618382 a 0.46879688,0.46879688 0 0 0 0.233646,0.189713 l 16.390761,6.026138 a 0.46879688,0.46879688 0 0 0 0.541265,-0.714084 c -0.986453,-1.374423 -1.581993,-2.934114 -1.787965,-4.527247 l 24.022987,2.05e-4 a 1.25,1.25 0 0 0 1.250232,-1.249311 1.25,1.25 0 0 0 -1.250534,-1.251319 l -24.025035,3.81e-4 c 0.203058,-1.587239 0.797227,-3.12943 1.787299,-4.474903 a 0.46879688,0.46879688 0 0 0 -0.540326,-0.716767 l -16.387347,6.026589 a 0.46879688,0.46879688 0 0 0 -0.24971,0.665098 0.46879688,0.46879688 0 0 0 0.01472,0.0255 z\",\n  stroke: \"none\",\n  fill: \"current\"\n});\n\nfunction SvgInE(_ref, svgRef) {\n  var title = _ref.title,\n      titleId = _ref.titleId,\n      props = _objectWithoutProperties(_ref, [\"title\", \"titleId\"]);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    viewBox: \"0 0 103.22301 119.19167\",\n    height: \"100%\",\n    width: \"100%\",\n    style: {\n      position: \"absolute\"\n    },\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _ref2);\n}\n\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgInE);\nexport default __webpack_public_path__ + \"static/media/in_e.653852d1.svg\";\nexport { ForwardRef as ReactComponent };","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport * as React from \"react\";\n\nvar _ref2 = /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M 95.889655,59.116536 A 0.46879688,0.46879688 0 0 0 95.656009,58.926823 L 79.265248,52.900685 a 0.46879688,0.46879688 0 0 0 -0.541265,0.714084 c 0.986453,1.374423 1.581993,2.934114 1.787965,4.527247 l -24.022987,-2.05e-4 a 1.25,1.25 0 0 0 -1.250232,1.249311 1.25,1.25 0 0 0 1.250534,1.251319 l 24.025035,-3.81e-4 c -0.203058,1.587239 -0.797227,3.12943 -1.787299,4.474903 a 0.46879688,0.46879688 0 0 0 0.540326,0.716767 l 16.387347,-6.026589 a 0.46879688,0.46879688 0 0 0 0.24971,-0.665098 0.46879688,0.46879688 0 0 0 -0.01472,-0.0255 z\",\n  stroke: \"none\",\n  fill: \"current\"\n});\n\nfunction SvgOutE(_ref, svgRef) {\n  var title = _ref.title,\n      titleId = _ref.titleId,\n      props = _objectWithoutProperties(_ref, [\"title\", \"titleId\"]);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    viewBox: \"0 0 103.22301 119.19167\",\n    height: \"100%\",\n    width: \"100%\",\n    style: {\n      position: \"absolute\"\n    },\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _ref2);\n}\n\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgOutE);\nexport default __webpack_public_path__ + \"static/media/out_e.0b0704b3.svg\";\nexport { ForwardRef as ReactComponent };","// colors from https://www.npmjs.com/package/colormap\r\nimport colormap from 'colormap';\r\n\r\nconst N_SHADES = 1000;\r\n\r\nconst colors = colormap({\r\n    colormap: 'cool',\r\n    nshades: N_SHADES,\r\n    format: 'hex',\r\n})\r\n\r\n\r\n/**\r\n * @param proportion proportion (0 - 1) along the configured color map to get color\r\n * @returns a color that is (proportion*100)% along the configured color map\r\n */\r\nfunction getColor(proportion : number) : string {\r\n    return colors[Math.floor(proportion*N_SHADES)];\r\n}\r\n\r\n\r\nexport {getColor};","import React from 'react';\r\nimport { Direction, Move } from '../../model/path/moves';\r\n// this weird import allows the svg to be treated as a react component\r\nimport {ReactComponent as E2E} from './svg/e2e.svg';\r\nimport {ReactComponent as E2NE} from './svg/e2ne.svg';\r\nimport {ReactComponent as E2NW} from './svg/e2nw.svg';\r\nimport {ReactComponent as E2W} from './svg/e2w.svg';\r\nimport {ReactComponent as E2SW} from './svg/e2sw.svg';\r\nimport {ReactComponent as E2SE} from './svg/e2se.svg';\r\nimport {ReactComponent as InE} from './svg/in_e.svg';\r\nimport {ReactComponent as OutE} from './svg/out_e.svg';\r\nimport './style.css';\r\nimport { MoveData } from './cell';\r\nimport { getColor } from './colors';\r\n\r\n\r\ninterface Props {\r\n    /** Moves (parts of the path) for the cell. */\r\n    configs : MoveData[];\r\n}\r\n\r\n\r\ninterface State {\r\n}\r\n\r\nconst RAD2DEG = 180. / Math.PI;\r\nconst HEX_SECTION_RAD = Math.PI / 3.;\r\nconst HEX_SECTION_DEG = -1 * Math.round(HEX_SECTION_RAD * RAD2DEG);\r\nconst ROTATION : {[key : number]: number} = {};\r\nROTATION[Direction.E] = 0;\r\nROTATION[Direction.NE] = HEX_SECTION_DEG;\r\nROTATION[Direction.NW] = 2*HEX_SECTION_DEG;\r\nROTATION[Direction.W] = 3*HEX_SECTION_DEG;\r\nROTATION[Direction.SW] = 4*HEX_SECTION_DEG;\r\nROTATION[Direction.SE] = 5*HEX_SECTION_DEG;\r\n\r\n/**\r\n * Logic for building the moves that are displayed in a cell.\r\n */\r\nclass DisplayMoves extends React.Component<Props, State> {\r\n\r\n    constructor(props : Props) {\r\n        super(props);\r\n        this.getMoves = this.getMoves.bind(this);\r\n    }\r\n\r\n    private getMoves() : any[] {\r\n        const moves : any[] = [];\r\n        for (let config of this.props.configs) {\r\n            const move : Move = config.move;\r\n            const color : string = getColor(config.step / config.pathLength);\r\n            const key : string = `${Move[move]}-${config.step}-${config.pathLength}-${Math.trunc(Math.random()*1000)}`;\r\n            switch (move) {\r\n\r\n                // Source is East\r\n                case Move.E2E:\r\n                    moves.push(<E2E key={key} fill={color} transform={`rotate(${ROTATION[Direction.E]})`}/>);\r\n                    break;\r\n                \r\n                case Move.E2NE:\r\n                    moves.push(<E2NE key={key} fill={color} transform={`rotate(${ROTATION[Direction.E]})`}/>);\r\n                    break;\r\n                \r\n                case Move.E2NW:\r\n                    moves.push(<E2NW key={key} fill={color} transform={`rotate(${ROTATION[Direction.E]})`}/>);\r\n                    break;   \r\n                    \r\n                case Move.E2W:\r\n                    moves.push(<E2W key={key} fill={color} transform={`rotate(${ROTATION[Direction.E]})`}/>);\r\n                    break; \r\n                    \r\n                case Move.E2SW:\r\n                    moves.push(<E2SW key={key} fill={color} transform={`rotate(${ROTATION[Direction.E]})`}/>);\r\n                    break;\r\n\r\n                case Move.E2SE:\r\n                    moves.push(<E2SE key={key} fill={color} transform={`rotate(${ROTATION[Direction.E]})`}/>);\r\n                    break;\r\n\r\n                case Move.E_IN:\r\n                    moves.push(<InE key={key} fill={color} transform={`rotate(${ROTATION[Direction.E]})`}/>);\r\n                    break;\r\n\r\n                case Move.E_OUT:\r\n                    moves.push(<OutE key={key} fill={color} transform={`rotate(${ROTATION[Direction.E]})`}/>);\r\n                    break;\r\n\r\n\r\n                // Source is North East\r\n                // Notice how each \"partial spin\" (e.g. going from E to NE, or SW to SE) of the source direction also \"spins\" the \r\n                //  SVGs to correctly match the source and destination. For instance, to show a move from North East to East, \r\n                //  we need to use the SVG that shows moving from the source direction (North East) to the cell that is one \r\n                //  partial spin clockwise. This is the East-to-South-East SVG. Then, the SVG is is rotated counter-clockwise \r\n                //  one partial spin to make the source be North East instead of East.\r\n                case Move.NE2E:\r\n                    moves.push(<E2SE key={key} fill={color} transform={`rotate(${ROTATION[Direction.NE]})`}/>);\r\n                    break;\r\n                \r\n                case Move.NE2NE:\r\n                    moves.push(<E2E key={key} fill={color} transform={`rotate(${ROTATION[Direction.NE]})`}/>);\r\n                    break;\r\n                \r\n                case Move.NE2NW:\r\n                    moves.push(<E2NE key={key} fill={color} transform={`rotate(${ROTATION[Direction.NE]})`}/>);\r\n                    break;   \r\n                    \r\n                case Move.NE2W:\r\n                    moves.push(<E2NW key={key} fill={color} transform={`rotate(${ROTATION[Direction.NE]})`}/>);\r\n                    break; \r\n                    \r\n                case Move.NE2SW:\r\n                    moves.push(<E2W key={key} fill={color} transform={`rotate(${ROTATION[Direction.NE]})`}/>);\r\n                    break;\r\n\r\n                case Move.NE2SE:\r\n                    moves.push(<E2SW key={key} fill={color} transform={`rotate(${ROTATION[Direction.NE]})`}/>);\r\n                    break;\r\n\r\n                case Move.NE_IN:\r\n                    moves.push(<InE key={key} fill={color} transform={`rotate(${ROTATION[Direction.NE]})`}/>);\r\n                    break;\r\n\r\n                case Move.NE_OUT:\r\n                    moves.push(<OutE key={key} fill={color} transform={`rotate(${ROTATION[Direction.NE]})`}/>);\r\n                    break;\r\n\r\n\r\n                // Source is North West\r\n                case Move.NW2E:\r\n                    moves.push(<E2SW key={key} fill={color} transform={`rotate(${ROTATION[Direction.NW]})`}/>);\r\n                    break;\r\n                \r\n                case Move.NW2NE:\r\n                    moves.push(<E2SE key={key} fill={color} transform={`rotate(${ROTATION[Direction.NW]})`}/>);\r\n                    break;\r\n                \r\n                case Move.NW2NW:\r\n                    moves.push(<E2E key={key} fill={color} transform={`rotate(${ROTATION[Direction.NW]})`}/>);\r\n                    break;   \r\n                    \r\n                case Move.NW2W:\r\n                    moves.push(<E2NE key={key} fill={color} transform={`rotate(${ROTATION[Direction.NW]})`}/>);\r\n                    break; \r\n                    \r\n                case Move.NW2SW:\r\n                    moves.push(<E2NW key={key} fill={color} transform={`rotate(${ROTATION[Direction.NW]})`}/>);\r\n                    break;\r\n\r\n                case Move.NW2SE:\r\n                    moves.push(<E2W key={key} fill={color} transform={`rotate(${ROTATION[Direction.NW]})`}/>);\r\n                    break;\r\n\r\n                case Move.NW_IN:\r\n                    moves.push(<InE key={key} fill={color} transform={`rotate(${ROTATION[Direction.NW]})`}/>);\r\n                    break;\r\n\r\n                case Move.NW_OUT:\r\n                    moves.push(<OutE key={key} fill={color} transform={`rotate(${ROTATION[Direction.NW]})`}/>);\r\n                    break;\r\n\r\n\r\n                \r\n                // Source is West\r\n                case Move.W2E:\r\n                    moves.push(<E2W key={key} fill={color} transform={`rotate(${ROTATION[Direction.W]})`}/>);\r\n                    break;\r\n                \r\n                case Move.W2NE:\r\n                    moves.push(<E2SW key={key} fill={color} transform={`rotate(${ROTATION[Direction.W]})`}/>);\r\n                    break;\r\n                \r\n                case Move.W2NW:\r\n                    moves.push(<E2SE key={key} fill={color} transform={`rotate(${ROTATION[Direction.W]})`}/>);\r\n                    break;   \r\n                    \r\n                case Move.W2W:\r\n                    moves.push(<E2E key={key} fill={color} transform={`rotate(${ROTATION[Direction.W]})`}/>);\r\n                    break; \r\n                    \r\n                case Move.W2SW:\r\n                    moves.push(<E2NE key={key} fill={color} transform={`rotate(${ROTATION[Direction.W]})`}/>);\r\n                    break;\r\n\r\n                case Move.W2SE:\r\n                    moves.push(<E2NW key={key} fill={color} transform={`rotate(${ROTATION[Direction.W]})`}/>);\r\n                    break;\r\n\r\n                case Move.W_IN:\r\n                    moves.push(<InE key={key} fill={color} transform={`rotate(${ROTATION[Direction.W]})`}/>);\r\n                    break;\r\n\r\n                case Move.W_OUT:\r\n                    moves.push(<OutE key={key} fill={color} transform={`rotate(${ROTATION[Direction.W]})`}/>);\r\n                    break;\r\n                    \r\n\r\n                // Source is South West\r\n                case Move.SW2E:\r\n                    moves.push(<E2NW key={key} fill={color} transform={`rotate(${ROTATION[Direction.SW]})`}/>);\r\n                    break;\r\n                \r\n                case Move.SW2NE:\r\n                    moves.push(<E2W key={key} fill={color} transform={`rotate(${ROTATION[Direction.SW]})`}/>);\r\n                    break;\r\n                \r\n                case Move.SW2NW:\r\n                    moves.push(<E2SW key={key} fill={color} transform={`rotate(${ROTATION[Direction.SW]})`}/>);\r\n                    break;   \r\n                    \r\n                case Move.SW2W:\r\n                    moves.push(<E2SE key={key} fill={color} transform={`rotate(${ROTATION[Direction.SW]})`}/>);\r\n                    break; \r\n                    \r\n                case Move.SW2SW:\r\n                    moves.push(<E2E key={key} fill={color} transform={`rotate(${ROTATION[Direction.SW]})`}/>);\r\n                    break;\r\n\r\n                case Move.SW2SE:\r\n                    moves.push(<E2NE key={key} fill={color} transform={`rotate(${ROTATION[Direction.SW]})`}/>);\r\n                    break;\r\n\r\n                case Move.SW_IN:\r\n                    moves.push(<InE key={key} fill={color} transform={`rotate(${ROTATION[Direction.SW]})`}/>);\r\n                    break;\r\n\r\n                case Move.SW_OUT:\r\n                    moves.push(<OutE key={key} fill={color} transform={`rotate(${ROTATION[Direction.SW]})`}/>);\r\n                    break;\r\n\r\n\r\n                // Source is South East\r\n                case Move.SE2E:\r\n                    moves.push(<E2NE key={key} fill={color} transform={`rotate(${ROTATION[Direction.SE]})`}/>);\r\n                    break;\r\n                \r\n                case Move.SE2NE:\r\n                    moves.push(<E2NW key={key} fill={color} transform={`rotate(${ROTATION[Direction.SE]})`}/>);\r\n                    break;\r\n                \r\n                case Move.SE2NW:\r\n                    moves.push(<E2W key={key} fill={color} transform={`rotate(${ROTATION[Direction.SE]})`}/>);\r\n                    break;   \r\n                    \r\n                case Move.SE2W:\r\n                    moves.push(<E2SW key={key} fill={color} transform={`rotate(${ROTATION[Direction.SE]})`}/>);\r\n                    break; \r\n                    \r\n                case Move.SE2SW:\r\n                    moves.push(<E2SE key={key} fill={color} transform={`rotate(${ROTATION[Direction.SE]})`}/>);\r\n                    break;\r\n\r\n                case Move.SE2SE:\r\n                    moves.push(<E2E key={key} fill={color} transform={`rotate(${ROTATION[Direction.SE]})`}/>);\r\n                    break;\r\n\r\n                case Move.SE_IN:\r\n                    moves.push(<InE key={key} fill={color} transform={`rotate(${ROTATION[Direction.SE]})`}/>);\r\n                    break;\r\n\r\n                case Move.SE_OUT:\r\n                    moves.push(<OutE key={key} fill={color} transform={`rotate(${ROTATION[Direction.SE]})`}/>);\r\n                    break;\r\n            }\r\n        }\r\n        return moves;\r\n    }\r\n\r\n    render() {\r\n        return <div className=\"no-interactions\">\r\n            {this.getMoves()}\r\n        </div>;\r\n    }\r\n}\r\n\r\nexport {DisplayMoves};","import React from 'react';\r\nimport { Forcing } from '../../model/cell/forcing';\r\n// this weird import allows the svg to be treated as a react component\r\nimport {ReactComponent as Hexagon} from './svg/hexagon.svg';\r\nimport { Move } from '../../model/path/moves';\r\nimport { DisplayMoves } from './moves';\r\nimport { Events } from '../events/events';\r\nimport './style.css';\r\n\r\ninterface Props {\r\n    /** Horizontal position (%) in container. */\r\n    x : number,\r\n\r\n    /** Vertical position (%) in container. */\r\n    y : number,\r\n\r\n    /** Row in grid. */\r\n    row : number,\r\n\r\n    /** Column in grid. */\r\n    column : number,\r\n\r\n    /** Size as percent of container. */\r\n    size : number,\r\n\r\n    /** Whether to show the cell label. */\r\n    showLabel : boolean,\r\n\r\n    /** React ref. */\r\n    ref : any\r\n}\r\n\r\ninterface MoveData {\r\n    move : Move,\r\n    step : number,\r\n    pathLength : number\r\n}\r\n\r\ninterface State {\r\n    moves: MoveData[],\r\n    showLabel: boolean,\r\n    forcing: Forcing\r\n}\r\n\r\n/**\r\n * The React component counterpart of analysis cell.\r\n */\r\nclass DisplayCell extends React.Component<Props, State> {\r\n    private static paintModeToggle : Forcing = Forcing.NONE;\r\n    private static selectedPaintMode : Forcing = Forcing.NONE;\r\n\r\n    constructor(props : Props) {\r\n        super(props);\r\n        this.state = {forcing: Forcing.NONE, moves: [], showLabel: this.props.showLabel};\r\n        this.toggleForcing = this.toggleForcing.bind(this);\r\n        this.sweepForcing = this.sweepForcing.bind(this);\r\n        this.getLabel = this.getLabel.bind(this);\r\n        this.setShowLabel = this.setShowLabel.bind(this);\r\n        this.setMoves = this.setMoves.bind(this);\r\n        this.clearMoves = this.clearMoves.bind(this);\r\n        this.addMove = this.addMove.bind(this);\r\n        this.reset = this.reset.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        Events.SHOW_LABELS_CHECKBOX_CHANGE.subscribe(this.setShowLabel);\r\n        Events.CLEAR_ROUTES_BUTTON.subscribe(this.clearMoves);\r\n        Events.RESET_GRID_BUTTON.subscribe(this.reset);\r\n    }\r\n    \r\n    \r\n    componentWillUnmount() {\r\n        Events.SHOW_LABELS_CHECKBOX_CHANGE.unsubscribe(this.setShowLabel);\r\n        Events.CLEAR_ROUTES_BUTTON.unsubscribe(this.clearMoves);\r\n        Events.RESET_GRID_BUTTON.unsubscribe(this.reset);\r\n    }\r\n\r\n\r\n    /**\r\n     * Sets the forcing to use when painting over cells.\r\n     * \r\n     * @param mode active mode for setting the cell forcing\r\n     */\r\n    public static updatePaintMode(mode : string) : void {\r\n        switch (mode) {\r\n            case \"Make Impassable\":\r\n                DisplayCell.selectedPaintMode = Forcing.NOT_TRAVERSABLE;\r\n                break;\r\n\r\n            case \"Force Entrance\":\r\n                DisplayCell.selectedPaintMode = Forcing.ENTRANCE;\r\n                break;\r\n\r\n            case \"Force Exit\":\r\n                DisplayCell.selectedPaintMode = Forcing.EXIT;\r\n                break;\r\n\r\n            default:\r\n                DisplayCell.selectedPaintMode = Forcing.NONE;\r\n                console.warn(`Unrecognized paint mode ${mode}. Resetting to None`);\r\n        }\r\n    }\r\n\r\n\r\n    private setShowLabel(doShow : boolean) : void {\r\n        this.setState({showLabel: doShow});\r\n    }\r\n\r\n\r\n    private setMoves(moves : MoveData[]) : void {\r\n        this.setState({moves : moves});\r\n    }\r\n\r\n\r\n    /**\r\n     * Clears all moves (i.e. parts of a path) from the cell.\r\n     */\r\n    public clearMoves() : void {\r\n        // for some reason using setState here doesnt fully clear out the\r\n        //  moves, so setting the length of the moves array to 0 forces it\r\n        //  to clear\r\n        // eslint-disable-next-line\r\n        this.state.moves.length = 0;\r\n        this.setState({moves: []});\r\n    }\r\n\r\n\r\n    private reset() : void {\r\n        this.setState({moves: [], forcing: Forcing.NONE});\r\n    }\r\n\r\n\r\n    /**\r\n     * @param move move to add and display in cell\r\n     */\r\n    public addMove(move : MoveData) : void {\r\n        this.state.moves.push(move);\r\n        this.setState({moves : this.state.moves});\r\n    }\r\n\r\n\r\n    private sweepForcing(event : React.MouseEvent) : void {\r\n        // see the following for the value of \"buttons\" being checked: https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/buttons\r\n        if (event.buttons === 1) {\r\n            this.setState({forcing: DisplayCell.paintModeToggle});\r\n        }\r\n    }\r\n\r\n\r\n    private toggleForcing() : void {\r\n        let forcing : Forcing = this.state.forcing;\r\n        if (Forcing.NONE === forcing) {\r\n            forcing =  DisplayCell.selectedPaintMode;\r\n\r\n        } else {\r\n            forcing = Forcing.NONE;\r\n        }\r\n        this.setState({forcing: forcing});\r\n    }\r\n\r\n\r\n    public getForcing() : Forcing {\r\n        return this.state.forcing;\r\n    }\r\n\r\n\r\n    private getLabel() : any {\r\n        if (this.state.showLabel) {\r\n            return <label className=\"cell-label no-interactions\" style={{fontSize: `${this.props.size/7}em`}}>{`(${this.props.row}, ${this.props.column})`}</label>;\r\n\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    private getColors() : string {\r\n        const isPartOfPath = (this.state.moves !== null) && (this.state.moves.length > 0);\r\n        if (isPartOfPath) {\r\n            return \"cell-svg-route\";\r\n\r\n        } else {\r\n            switch (this.state.forcing) {\r\n                case Forcing.NOT_TRAVERSABLE:\r\n                    return \"cell-svg-not-traversable\";\r\n\r\n                case Forcing.ENTRANCE:\r\n                    return \"cell-svg-entrance\";\r\n\r\n                case Forcing.EXIT:\r\n                    return \"cell-svg-exit\";\r\n\r\n                default:\r\n                    return \"cell-svg-base\";\r\n            }\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return <div className=\"cell-container\" style={{top: `${this.props.y}%`, left: `${this.props.x}%`, width: `${this.props.size}%`} }>\r\n            {this.getLabel()}\r\n            <DisplayMoves configs={this.state.moves}/>\r\n            <Hexagon className={this.getColors()}\r\n                onMouseEnter={this.sweepForcing}\r\n                onMouseDown={() => {\r\n                    this.toggleForcing();\r\n                    DisplayCell.paintModeToggle = (DisplayCell.paintModeToggle === DisplayCell.selectedPaintMode) ? Forcing.NONE : DisplayCell.selectedPaintMode;\r\n                }}\r\n            />\r\n        </div>;\r\n    }\r\n}\r\n\r\n\r\nEvents.PAINT_MODE_SELECT.subscribe(DisplayCell.updatePaintMode);\r\n\r\nexport {DisplayCell};\r\nexport type {MoveData};","import React from 'react';\r\nimport { DEFAULT_ALGORITHM, DEFAULT_COLUMNS, DEFAULT_ROWS, MAX_COLUMNS, MAX_ROWS, ROUTE_ANIMATION_INTERVAL_MS } from '../../config/configs';\r\nimport { Cell } from '../../model/cell/cell';\r\nimport { Forcing } from '../../model/cell/forcing';\r\nimport { Generator } from '../../model/generator/generator';\r\nimport { Grid } from '../../model/grid/grid';\r\nimport { Move } from '../../model/path/moves';\r\nimport { DisplayCell, MoveData } from '../cell/cell';\r\nimport { DirectRouteControls } from '../controls/generator/direct';\r\nimport { DrunkardControls } from '../controls/generator/drunkard';\r\nimport { GnomeControls } from '../controls/generator/gnome';\r\nimport { Events } from '../events/events';\r\nimport './style.css';\r\n\r\ninterface Props {\r\n}\r\n\r\n\r\ninterface State {\r\n    rows : number;\r\n    columns : number;\r\n}\r\n\r\n\r\ninterface DownloadableGrid {\r\n    cells : {[iY : number] : {[iX : number] : Forcing}};\r\n    nColumnsOnEvenIndexRows : number;\r\n    nColumnsOnOddIndexRows : number;\r\n}\r\n\r\n\r\n/**\r\n * Component that shows the hexagon grid, i.e. all the {@link DisplayCell}. This also manages most functionality\r\n * of the UI, including updating cell forcings, telling cells to display (or clear) moves from generated routes,\r\n * download the grid state and generate routes, etc.\r\n */\r\nclass DisplayGrid extends React.Component<Props, State> {\r\n    private readonly displayCellRefs : Map<number, Map<number, React.RefObject<DisplayCell>>>;\r\n    private cellShowLabelStart : boolean = false;\r\n    private animateRoutes : boolean = false;\r\n    private selectedAlgorithm : string = DEFAULT_ALGORITHM;\r\n    private activePaths : Cell[][] = [];\r\n\r\n    constructor(props : Props) {\r\n        super(props);\r\n        this.state = {columns: DEFAULT_COLUMNS, rows: DEFAULT_ROWS};\r\n        this.updateRows = this.updateRows.bind(this);\r\n        this.updateColumns = this.updateColumns.bind(this);\r\n        this.setCellShowLabelStart = this.setCellShowLabelStart.bind(this);\r\n        this.setSelectedAlgorithm = this.setSelectedAlgorithm.bind(this);\r\n        this.generateRoutes = this.generateRoutes.bind(this);\r\n        this.updateDoAnimateRoutes = this.updateDoAnimateRoutes.bind(this);\r\n        this.downloadGrid = this.downloadGrid.bind(this);\r\n        this.displayCellRefs = new Map<number, Map<number, React.RefObject<DisplayCell>>>();\r\n        for (let r : number = 0; r < MAX_ROWS; r++) {\r\n            this.displayCellRefs.set(r, new Map<number, React.RefObject<DisplayCell>>());\r\n            for (let c : number = 0; c < MAX_COLUMNS; c++) {\r\n                this.displayCellRefs.get(r)!.set(c, React.createRef());\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    componentDidMount() {\r\n        Events.COLUMNS_SLIDER_VALUE_CHANGE.subscribe(this.updateColumns);\r\n        Events.ROWS_SLIDER_VALUE_CHANGE.subscribe(this.updateRows);\r\n        Events.SHOW_LABELS_CHECKBOX_CHANGE.subscribe(this.setCellShowLabelStart);\r\n        Events.GENERATOR_ALGORITHM_SELECT.subscribe(this.setSelectedAlgorithm);\r\n        Events.GENERATE_BUTTON.subscribe(this.generateRoutes);\r\n        Events.ANIMATE_ROUTES_CHECKBOX_CHANGE.subscribe(this.updateDoAnimateRoutes);\r\n        Events.DOWNLOAD_GRID_BUTTON.subscribe(this.downloadGrid);\r\n    }\r\n\r\n\r\n    componentWillUnmount() {\r\n        Events.COLUMNS_SLIDER_VALUE_CHANGE.unsubscribe(this.updateColumns);\r\n        Events.ROWS_SLIDER_VALUE_CHANGE.unsubscribe(this.updateRows);\r\n        Events.SHOW_LABELS_CHECKBOX_CHANGE.unsubscribe(this.setCellShowLabelStart);\r\n        Events.GENERATOR_ALGORITHM_SELECT.unsubscribe(this.setSelectedAlgorithm);\r\n        Events.GENERATE_BUTTON.unsubscribe(this.generateRoutes);\r\n        Events.ANIMATE_ROUTES_CHECKBOX_CHANGE.unsubscribe(this.generateRoutes);\r\n        Events.DOWNLOAD_GRID_BUTTON.unsubscribe(this.downloadGrid);\r\n    }\r\n\r\n\r\n    private updateRows(rows : number) : void {\r\n        this.setState({rows: rows});\r\n    }\r\n\r\n\r\n    private updateColumns(columns : number) : void {\r\n        this.setState({columns: columns});\r\n    }\r\n\r\n\r\n    private setCellShowLabelStart(startState : boolean) : void {\r\n        this.cellShowLabelStart = startState;\r\n    }\r\n\r\n\r\n    private setSelectedAlgorithm(algorithm : string) : void {\r\n        this.selectedAlgorithm = algorithm;\r\n    }\r\n\r\n\r\n    private updateDoAnimateRoutes(doAnimation : boolean) : void {\r\n        this.animateRoutes = doAnimation;\r\n    }\r\n\r\n\r\n    private downloadGrid() : void {\r\n        const analysisGrid : Grid = Grid.ofNominalSize(this.state.rows, this.state.columns);\r\n        const cellsObj : DownloadableGrid = {\r\n            nColumnsOnEvenIndexRows: analysisGrid.getNumberOfColumnsOnEvenIndexRows(), \r\n            nColumnsOnOddIndexRows: analysisGrid.getNumberOfColumnsOnOddIndexRows(),\r\n            cells: {}\r\n        };\r\n        for (let analysisCell of analysisGrid) {\r\n            const iY = analysisCell.getIY();\r\n            const iX = analysisCell.getIX();\r\n            if (!cellsObj.cells.hasOwnProperty(iY)!) {\r\n                cellsObj.cells[iY] = {};\r\n            }\r\n            const displayCell : DisplayCell = this.displayCellRefs.get(iY)!.get(iX)!.current!;\r\n            cellsObj.cells[iY]![iX] = displayCell.getForcing();\r\n        }\r\n        \r\n        const forcings : {[name : string] : number} = {\r\n            'NONE': Forcing.NONE,\r\n            'ENTRANCE': Forcing.ENTRANCE, \r\n            'EXIT': Forcing.EXIT, \r\n            'NOT_TRAVERSABLE': Forcing.NOT_TRAVERSABLE\r\n        };\r\n\r\n        const paths : number[][][] = [];\r\n        for (let path of this.activePaths) {\r\n            const outputPath : number[][] = [];\r\n            for (let cell of path) {\r\n                outputPath.push([cell.getIY(), cell.getIX()]);\r\n            }\r\n            paths.push(outputPath);\r\n        }\r\n\r\n        let algorithmSettings : any = null;\r\n        switch (this.selectedAlgorithm) {\r\n            case \"Drunkard\":\r\n                algorithmSettings = DrunkardControls.ref.current!.getConfig();\r\n                break;\r\n                \r\n            case \"Direct\":\r\n                algorithmSettings = DirectRouteControls.ref.current!.getConfig();\r\n                break;\r\n\r\n            case \"The Traveling Gnome\":\r\n                algorithmSettings = GnomeControls.ref.current!.getConfig();\r\n                break;\r\n        }\r\n        \r\n        const contents : any = {\r\n            forcings: forcings, \r\n            grid: cellsObj, \r\n            paths: paths,\r\n            settings: {\r\n                algorithm: this.selectedAlgorithm,\r\n                algorithmSettings: algorithmSettings\r\n            }\r\n        };\r\n\r\n        const element = document.createElement('a');\r\n        element.setAttribute('href', 'data:text/plain;charset=utf-8,' + encodeURIComponent(JSON.stringify(contents, undefined, 2)));\r\n        element.setAttribute('download', 'grid.json');\r\n        element.style.display = 'none';\r\n        document.body.appendChild(element);\r\n        element.click();\r\n        document.body.removeChild(element);\r\n    }\r\n\r\n\r\n    private generateRoutes() : void {\r\n\r\n        // set up for route generation\r\n        const analysisGrid : Grid = Grid.ofNominalSize(this.state.rows, this.state.columns);\r\n        for (let analysisCell of analysisGrid) {\r\n            const iY = analysisCell.getIY();\r\n            const iX = analysisCell.getIX();\r\n            const displayCell : DisplayCell = this.displayCellRefs.get(iY)!.get(iX)!.current!;\r\n            // clear any existing moves from the display cell so as not to continually grow\r\n            //  their moves (or mistakingly show a move that shouldnt be there). It would be\r\n            //  preferable to do this in DisplayCell, but based on the order in which subscribers\r\n            //  to the button-press are called, it can cause parts of the path to not be rendered\r\n            //  in those cells (I dont know why)\r\n            displayCell.clearMoves();\r\n            analysisCell.setForcing(displayCell.getForcing());\r\n        }\r\n\r\n\r\n        // generate routes\r\n        let paths : Cell[][] = [];\r\n        switch (this.selectedAlgorithm) {\r\n            case \"Drunkard\":\r\n                paths = Generator.generateDrunkardPaths(analysisGrid, DrunkardControls.ref.current!.getConfig());\r\n                break;\r\n                \r\n            case \"Direct\":\r\n                paths = Generator.generateDirectRoutePaths(analysisGrid, DirectRouteControls.ref.current!.getConfig());\r\n                break;\r\n\r\n            case \"The Traveling Gnome\":\r\n                paths = Generator.generateTheTravelingGnomePaths(analysisGrid, GnomeControls.ref.current!.getConfig());\r\n                break;\r\n        }\r\n        this.activePaths = paths;\r\n\r\n\r\n        // display results on grid\r\n        const animationIntervalMs = this.animateRoutes ? ROUTE_ANIMATION_INTERVAL_MS : 0;\r\n        let currentAnimationDelay = 0;\r\n        for (let path of paths) {\r\n            if (path.length === 0) continue;\r\n            let displayCell : DisplayCell | null = this.getDisplayCellFromAnalysisCell(path[0]);\r\n            let move : Move = analysisGrid.getMoveTowardOtherCell(null, path[0], path[1]);\r\n            let moveData : MoveData = {move: move, step: 0, pathLength: path.length};\r\n            setTimeout(displayCell!.addMove, currentAnimationDelay, moveData);\r\n            currentAnimationDelay += animationIntervalMs;\r\n            for (let i : number = 1; i < (path.length - 1); i++) {\r\n                displayCell = this.getDisplayCellFromAnalysisCell(path[i]);\r\n                if (displayCell === null) continue;\r\n                move = analysisGrid.getMoveTowardOtherCell(path[i-1], path[i], path[i+1]);\r\n                moveData = {move: move, step: i, pathLength: path.length};\r\n                setTimeout(displayCell!.addMove, currentAnimationDelay, moveData);\r\n                currentAnimationDelay += animationIntervalMs;\r\n            }\r\n            const i : number = path.length - 1;\r\n            displayCell = this.getDisplayCellFromAnalysisCell(path[i]);\r\n            move = analysisGrid.getMoveTowardOtherCell(path[i-1], path[i], null);\r\n            moveData = {move: move, step: (path.length - 1), pathLength: path.length};\r\n            setTimeout(displayCell!.addMove, currentAnimationDelay, moveData);\r\n            currentAnimationDelay += animationIntervalMs;\r\n        }\r\n    }\r\n\r\n\r\n    private getDisplayCellFromAnalysisCell(cell : Cell) : DisplayCell | null {\r\n        return this.displayCellRefs.get(cell.getIY())!.get(cell.getIX())!.current; \r\n    }\r\n\r\n\r\n    private createDisplayGrid(rows : number, columns : number) : DisplayCell[] {\r\n        // I would prefer to keep the grid as a member variable of the display grid, but the display\r\n        //  cells dont seem to hold on to the reference of the analysis cells (in the Grid), and\r\n        //  as a result arent transfering state when starting path generation. For that reason, I \r\n        //  create a new grid and copy over the state each time path generation starts.\r\n        const analysisGrid : Grid = Grid.ofNominalSize(rows, columns);\r\n        const result : DisplayCell[] = [];\r\n        for (let analysisCell of analysisGrid) {\r\n            const iY = analysisCell.getIY();\r\n            const iX = analysisCell.getIX();\r\n            const ref : React.RefObject<DisplayCell> = this.displayCellRefs.get(iY)!.get(iX)!;\r\n            const displayCell : DisplayCell = this.createDisplayCell(analysisCell, ref);\r\n            result.push(displayCell);\r\n        }\r\n        return result;\r\n    }\r\n\r\n\r\n    private createDisplayCell(cell : Cell, ref : React.RefObject<DisplayCell>) : any {\r\n        // because each \"column\" overlaps its neighbors by 50% and the total number of\r\n        //  \"columns\" (in the array of grid cells) is 50% of what's requested, the\r\n        //  actual width of each cell should account for this 50% overlap by being larger\r\n        //  by adjusting the number of effective columns to be 50% of requested (and some other adjustments\r\n        //  I just played around with :O)\r\n        const c : number = this.state.columns;\r\n        const r : number = this.state.rows;\r\n        const row : number = cell.getIY();\r\n        const column : number = cell.getIX();\r\n        // actual number of cells wide is reduced due to overlap of columns\r\n        const gridWidthPropOfCellWidth : number = 0.5*c + 0.5;\r\n        const cellSizePercent = (1.0 / gridWidthPropOfCellWidth)*100.0;\r\n        const cellTopPercent = ((Math.sqrt(3)/2) / r)*100.0 + 12/(r + 10); // small adjustment to make things work nicely (dont know why the math doesnt work)\r\n        // shift every other row half-width to the right to make cells line up in a proper grid\r\n        const xShift = (row % 2) === 1 ? 0.5 : 0.0;\r\n        const x : number = (column + xShift)*cellSizePercent;\r\n        const y : number = row*cellTopPercent;\r\n        return <DisplayCell key={`(${row},${column})`} \r\n            x={x} \r\n            y={y} \r\n            row={row}\r\n            column={column}\r\n            size={cellSizePercent}\r\n            ref={ref}\r\n            showLabel={this.cellShowLabelStart}/>;\r\n    }\r\n\r\n\r\n    render() {\r\n        const c = this.state.columns;\r\n        const r = this.state.rows;\r\n        const gridWidthPropOfCellWidth : number = 0.5*c + 0.5;\r\n        const containerHeightProportionOfWidth = Math.sqrt(1/12) * ((3*r + 1) / gridWidthPropOfCellWidth);\r\n\r\n        return <div className=\"grid-section\">\r\n            <div className=\"grid-container\" style={{height: `calc(95vw*${containerHeightProportionOfWidth})`}}>\r\n                {this.createDisplayGrid(r, c)}\r\n            </div>\r\n        </div>;\r\n    }\r\n}\r\n\r\nexport {DisplayGrid};","import React from 'react';\r\nimport { Controls } from './components/controls/controls';\r\nimport { DisplayGrid } from './components/grid/grid';\r\nimport './App.css';\r\n\r\ninterface Props {}\r\n\r\ninterface State {\r\n}\r\n\r\nclass App extends React.Component<Props, State> {\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"App\">\r\n                <Controls/>\r\n                <DisplayGrid/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}